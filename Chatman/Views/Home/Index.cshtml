@{
    ViewData["Title"] = "Home";
}

<link rel="stylesheet" href="~/css/index.min.css" />
<link rel="stylesheet" href="~/css/chat_room.min.css" />

<style>
</style>

<div class="home-container">
    <!-- Left Sidebar -->
    <div class="sidebar">
        <!-- User Profile Section -->
        <div class="user-profile">
            <div class="user-info">
                <img id="imgUserImage" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ48JWGkSOWJegd_jiLj6C5cz-Ityd6OMLR-w&s" alt="User avatar" class="user-avatar">
                <div class="user-details">
                    <h3>John Doe</h3>
                    <p class="status">Online</p>
                    <p class="bio">Loading...</p>
                    <span class="edit-bio">編輯個人狀態</span>
                    <div class="bio-edit-container" style="display: none;">
                        <input type="text" class="bio-input" maxlength="100" placeholder="新增個人狀態...">
                        <div class="bio-actions">
                            <button class="save-bio">儲存</button>
                            <button class="cancel-bio">取消</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search Bar -->
        <div class="search-container">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="搜尋...">
        </div>

        <!-- Navigation Tabs -->
        <div class="nav-tabs">
            <button class="tab-btn active" data-tab="friends">好友列表</button>
            <button class="tab-btn" data-tab="groups">群組列表</button>
        </div>

        <!-- Lists Container -->
        <div class="lists-container">
            <!-- Friends List -->
            <div class="list-section" id="friends-list">
                <div class="list-group">
                    <h4>線上好友</h4>
                    <div class="friend-item">
                        <div class="friend-avatar-container">
                            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRLe5PABjXc17cjIMOibECLM7ppDwMmiDg6Dw&s" alt="Friend avatar">
                            <span class="status-dot online"></span>
                        </div>
                        <span class="friend-name">Allan</span>
                    </div>
                    <div class="friend-item">
                        <div class="friend-avatar-container">
                            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRLe5PABjXc17cjIMOibECLM7ppDwMmiDg6Dw&s" alt="Friend avatar">
                            <span class="status-dot online"></span>
                        </div>
                        <span class="friend-name">Jack</span>
                    </div>
                </div>

                <div class="list-group">
                    <h4>離線好友</h4>
                    <div class="friend-item">
                        <div class="friend-avatar-container">
                            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRLe5PABjXc17cjIMOibECLM7ppDwMmiDg6Dw&s" alt="Friend avatar">
                            <span class="status-dot offline"></span>
                        </div>
                        <span class="friend-name">Jason</span>
                    </div>
                </div>
            </div>

            <!-- Groups List -->
            <div class="list-section hidden" id="groups-list">
                <div class="group-item">
                    <img src="https://via.placeholder.com/32" alt="Group avatar">
                    <div class="group-info">
                        <span class="group-name">群組 1</span>
                        <span class="group-members">4 位成員</span>
                    </div>
                </div>
                <div class="group-item">
                    <img src="https://via.placeholder.com/32" alt="Group avatar">
                    <div class="group-info">
                        <span class="group-name">群組 2</span>
                        <span class="group-members">6 位成員</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bottom Actions -->
        <div class="bottom-actions">
            <!-- 通知按鈕和選單 -->
            <div class="action-container">
                <button class="action-btn"><i class="fas fa-bell"></i></button>
                <div class="popup-menu notification-menu">
                    <div class="menu-header">通知</div>
                    <div class="menu-content">
                        <div class="empty-state">
                            <i class="fas fa-bell-slash"></i>
                            <p>目前沒有新通知</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 訊息按鈕和選單 -->
            <div class="action-container">
                <button class="action-btn"><i class="fas fa-comment"></i></button>
                <div class="popup-menu message-menu">
                    <div class="menu-header">訊息</div>
                    <div class="menu-content">
                        <div class="empty-state">
                            <i class="fas fa-comments"></i>
                            <p>沒有未讀訊息</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 設定按鈕和選單 -->
            <div class="action-container">
                <button class="action-btn"><i class="fas fa-cog"></i></button>
                <div class="popup-menu settings-menu">
                    <div class="menu-header">設定</div>
                    <div class="menu-content">
                        <a href="#" class="menu-item">
                            <i class="fas fa-user"></i>
                            <span>基本資料設定</span>
                        </a>
                        <a href="#" class="menu-item">
                            <i class="fas fa-palette"></i>
                            <span>主題設定</span>
                        </a>
                        <a href="#" class="menu-item">
                            <i class="fas fa-bell"></i>
                            <span>通知設定</span>
                        </a>
                        <div class="menu-divider"></div>
                        <a href="javascript: logout();" class="menu-item text-red">
                            <i class="fas fa-sign-out-alt"></i>
                            <span>登出</span>
                        </a>
                    </div>
                </div>
            </div>
            <!--新增好友-->
            <div class="action-container">
                <button class="action-btn" id="addFriendBtn">
                    <i class="fas fa-user-plus"></i>
                </button>
            </div>
            <div id="addFriendModal" class="modal hidden">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>新增好友</h3>
                        <button class="close-btn">&times;</button>
                    </div>

                    <div class="modal-body">
                        <!-- 搜尋區域 -->
                        <div class="search-box">
                            <input type="text" id="userSearchInput" placeholder="輸入用戶名稱或 Email 搜尋...">
                            <button id="searchBtn">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>

                        <!-- 搜尋結果列表 -->
                        <div class="search-results">
                            <!-- 結果會動態插入這裡 -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="main-content">
        <!-- 默認歡迎訊息 -->
        <div class="welcome-message" id="welcome-message">
            <i class="fas fa-comments"></i>
            <p>選擇一個聊天或開始新的對話</p>
        </div>

        <!-- 聊天室區域 -->
        <div class="chat-room hidden" id="chat-room">
            <!-- 聊天室標題 -->
            <div class="chat-header">
                <div class="chat-user-info">
                    <img src="" alt="User avatar" class="chat-user-avatar">
                    <div class="chat-user-details">
                        <h3 class="chat-user-name"></h3>
                        <span class="chat-user-status"></span>
                    </div>
                </div>
                <div class="chat-actions">
                    <button class="chat-action-btn">
                        <i class="fas fa-phone"></i>
                    </button>
                    <button class="chat-action-btn">
                        <i class="fas fa-video"></i>
                    </button>
                    <button class="chat-action-btn">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                </div>
            </div>

            <!-- 聊天記錄區域 -->
            <div class="messages-container">
                <div class="messages-list">
                    <!-- 消息會動態插入這裡 -->
                </div>
            </div>

            <!-- 輸入區域 -->
            <div class="input-area">
                <div class="input-container">
                    <button class="input-action-btn">
                        <i class="fas fa-plus"></i>
                    </button>
                    <input type="text" id="messageInput" placeholder="輸入訊息...">
                    <button class="input-action-btn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // SignalR 連接
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .build();

        // 在線用戶ID
        let onlineUserIds = [];

        $(document).ready(function() {
            // 初始化
            initializeChat();

            // 啟動 SignalR 連接
            startSignalRConnection();

            // 初始化 SignalR 相關設定
            initializeSignalR();

            // 載入用戶資訊
            loadUserProfile();

            // 新增好友相關功能初始化
            initializeAddFriend();
        });

        function initializeChat() {
            // Tab switching
            $('.tab-btn').click(function() {
                $('.tab-btn').removeClass('active');
                $(this).addClass('active');

                const tabId = $(this).data('tab');
                $('.list-section').addClass('hidden');
                $(`#${tabId}-list`).removeClass('hidden');
            });

            // 好友點擊事件
            $(document).on('click', '.friend-item', function() {
                $('.friend-item').removeClass('selected');
                $(this).addClass('selected');
                openChatRoom($(this));
            });

            // 點擊按鈕時切換選單
            $('.action-btn').click(function (e) {
                e.stopPropagation();
                const $container = $(this).closest('.action-container');
                const $menu = $container.find('.popup-menu');

                // 關閉其他選單
                $('.popup-menu').not($menu).removeClass('active');

                // 檢查是否為手機版
                const isMobile = window.innerWidth <= 768;

                if (!$menu.hasClass('active')) {
                    if (isMobile) {
                        // 手機版的處理邏輯
                        $menu.css({
                            'position': 'fixed',
                            'left': '50%',
                            'bottom': '70px',
                            'transform': 'translateX(-50%)',
                            'width': '90%',
                            'max-width': '360px'
                        });
                    } else {
                        // 電腦版的處理邏輯
                        const buttonRect = this.getBoundingClientRect();
                        const menuWidth = $menu.outerWidth();
                        const windowWidth = window.innerWidth;

                        // 重置樣式
                        $menu.css({
                            'position': 'fixed',
                            'width': '260px',
                            'transform': 'none'
                        });

                        // 水平位置調整
                        if (buttonRect.right + menuWidth > windowWidth) {
                            $menu.css({
                                'right': '20px',
                                'left': 'auto'
                            });
                        } else {
                            $menu.css({
                                'left': buttonRect.left + 'px',
                                'right': 'auto'
                            });
                        }

                        // 垂直位置調整
                        if (buttonRect.top > 300) { // 如果按鈕位置較低
                            $menu.css({
                                'bottom': '60px',
                                'top': 'auto'
                            });
                        } else {
                            $menu.css({
                                'top': buttonRect.bottom + 'px',
                                'bottom': 'auto'
                            });
                        }
                    }
                }

                // 切換選單
                $menu.toggleClass('active');
            });

            // 點擊外部關閉選單
            $(document).click(function (e) {
                if (!$(e.target).closest('.popup-menu, .action-btn').length) {
                    $('.popup-menu').removeClass('active');
                }
            });

            // 點擊選單內容時防止選單關閉
            $('.popup-menu').click(function (e) {
                e.stopPropagation();
            });
        }

        // 載入用戶個人資料
        function loadUserProfile() {
            const userInfo = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo'));
            if (userInfo) {
                $('.user-profile .user-details h3').text(userInfo.userName);
                $("#imgUserImage").prop("src", userInfo.userImage);

                // 設置個人狀態
                if (userInfo.bio) {
                    $('.user-profile .bio').text(userInfo.bio);
                } else {
                    $('.user-profile .bio').text('新增個人狀態...');
                }
            }

            // 註冊個人狀態編輯事件
            $('.edit-bio').click(function() {
                const currentBio = $('.bio').text();
                $('.bio-input').val(currentBio !== '新增個人狀態...' ? currentBio : '');
                $('.bio-edit-container').show();
                $('.bio, .edit-bio').hide();
                $('.bio-input').focus();
            });

            $('.cancel-bio').click(function() {
                $('.bio-edit-container').hide();
                $('.bio, .edit-bio').show();
            });

            $('.save-bio').click(async function() {
                const newBio = $('.bio-input').val().trim();
                try {
                    const response = await $.ajax({
                        url: '/User/UpdateUserBio',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ bio: newBio })
                    });

                    if (response.success) {
                        $('.bio').text(newBio || '新增個人狀態...');
                        $('.bio-edit-container').hide();
                        $('.bio, .edit-bio').show();

                        // 更新本地存儲的用戶信息
                        const userInfo = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo'));
                        if (userInfo) {
                            userInfo.bio = newBio;
                            if (localStorage.getItem('userInfo')) {
                                localStorage.setItem('userInfo', JSON.stringify(userInfo));
                            } else {
                                sessionStorage.setItem('userInfo', JSON.stringify(userInfo));
                            }
                        }
                    } else {
                        alert('更新失敗：' + response.message);
                    }
                } catch (error) {
                    console.error('更新失敗：', error);
                    alert('更新失敗，請稍後再試');
                }
            });

            // 按下 Enter 儲存
            $('.bio-input').keypress(function(e) {
                if (e.which == 13) {
                    $('.save-bio').click();
                }
            });

            // 按下 Esc 取消
            $('.bio-input').keydown(function(e) {
                if (e.which == 27) {
                    $('.cancel-bio').click();
                }
            });
        }

        // 載入好友列表
        async function loadFriendsList() {
            try {
                // 首先從 SignalR hub 獲取在線用戶列表
                onlineUserIds = await connection.invoke("GetOnlineUserIds");

                const response = await $.ajax({
                    url: '/User/GetFriendsList',
                    type: 'GET',
                    dataType: 'json',
                    contentType: 'application/json'
                });

                if (response.success){
                    renderFriendsList(response.data);
                }
                else{
                    errorAlert('註冊失敗', response.message || '發生錯誤', 1500);
                }

            } catch(error) {
                console.error('API錯誤：', error);
            }
        }

        // 渲染好友列表
        function renderFriendsList(friends) {
            // 根據 onlineUserIds 判斷每個好友的在線狀態
            const onlineFriends = friends.filter(f => onlineUserIds.includes(f.friendId));
            const offlineFriends = friends.filter(f => !onlineUserIds.includes(f.friendId));

            let onlineHtml = '';
            let offlineHtml = '';

            onlineFriends.forEach(friend => {
                onlineHtml += `
                    <div class="friend-item" data-id="${friend.friendId}">
                        <div class="friend-avatar-container">
                            <img src="${friend.userImage || '/images/default-avatar.png'}" alt="${friend.userName}">
                            <span class="status-dot online"></span>
                        </div>
                        <span class="friend-name">${friend.userName}</span>
                    </div>
                `;
            });

            offlineFriends.forEach(friend => {
                offlineHtml += `
                    <div class="friend-item" data-id="${friend.friendId}">
                        <div class="friend-avatar-container">
                            <img src="${friend.userImage || '/images/default-avatar.png'}" alt="${friend.userName}">
                            <span class="status-dot offline"></span>
                        </div>
                        <span class="friend-name">${friend.userName}</span>
                    </div>
                `;
            });

            // 使用淡入效果更新列表
            $('#friends-list .list-group:eq(0)').fadeOut(200, function() {
                $(this).html(`
                    <h4>線上好友 (${onlineFriends.length})</h4>
                    ${onlineHtml}
                `).fadeIn(200);
            });

            $('#friends-list .list-group:eq(1)').fadeOut(200, function() {
                $(this).html(`
                    <h4>離線好友 (${offlineFriends.length})</h4>
                    ${offlineHtml}
                `).fadeIn(200);
            });
        }

        // 開啟聊天室
        function openChatRoom(friendElement) {
            const friendId = friendElement.data('id');
            const friendName = friendElement.find('.friend-name').text();
            const friendAvatar = friendElement.find('img').attr('src');
            const isOnline = friendElement.find('.status-dot').hasClass('online');

            // 更新聊天室信息
            $('.chat-user-name').text(friendName);
            $('.chat-user-avatar').attr('src', friendAvatar);
            $('.chat-user-status').text(isOnline ? '在線' : '離線');

            // 隱藏歡迎訊息，顯示聊天室
            $('#welcome-message').addClass('hidden');
            $('#chat-room').removeClass('hidden');

            // 載入聊天記錄
            loadChatHistory(friendId);

            // 在移動設備上，隱藏側邊欄
            if (window.innerWidth <= 768) {
                $('.sidebar').removeClass('active');
            }
        }

        // 載入聊天記錄
        function loadChatHistory(friendId) {
            // TODO: 實作載入聊天記錄的 API 調用
        }

        // 啟動 SignalR 連接
        async function startSignalRConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected.");

                // 連接後註冊當前用戶
                const userInfo = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo'));
                if (userInfo && userInfo.userId) {
                    try {
                        await connection.invoke("RegisterUser", parseInt(userInfo.userId));
                        // 載入好友列表
                        await loadFriendsList();
                    } catch (error) {
                        console.error("註冊用戶失敗:", error);
                    }
                }
            } catch (err) {
                console.error("SignalR連接失敗:", err);
                setTimeout(startSignalRConnection, 5000);
            }
        }

        // 初始化 SignalR 相關設定
        function initializeSignalR()
        {
            // SignalR 事件處理
            connection.on("FriendOnline", (userId) => {
                $(`.friend-item[data-id="${userId}"] .status-dot`).removeClass('offline').addClass('online');
            });

            connection.on("FriendOffline", (userId) => {
                $(`.friend-item[data-id="${userId}"] .status-dot`).removeClass('online').addClass('offline');
            });

            // 用戶上線事件處理
            connection.on("UserOnline", (userId) => {
                // 找到對應的好友元素
                const friendItem = $(`.friend-item[data-id="${userId}"]`);
                if (friendItem.length) {
                    // 更新狀態點為在線
                    friendItem.find('.status-dot')
                        .removeClass('offline')
                        .addClass('online');

                    // 將好友項移動到在線列表
                    const onlineList = $('#friends-list .list-group:eq(0)');
                    friendItem.appendTo(onlineList);

                    // 更新計數
                    updateFriendsCounts();
                }
            });

            // 用戶離線事件處理
            connection.on("UserOffline", (userId) => {
                // 找到對應的好友元素
                const friendItem = $(`.friend-item[data-id="${userId}"]`);
                if (friendItem.length) {
                    // 更新狀態點為離線
                    friendItem.find('.status-dot')
                        .removeClass('online')
                        .addClass('offline');

                    // 將好友項移動到離線列表
                    const offlineList = $('#friends-list .list-group:eq(1)');
                    friendItem.appendTo(offlineList);

                    // 更新計數
                    updateFriendsCounts();
                }
            });

            // 更新好友計數的輔助函數
            function updateFriendsCounts() {
                // 更新在線好友數量
                const onlineCount = $('#friends-list .list-group:eq(0) .friend-item').length;
                $('#friends-list .list-group:eq(0) h4').text(`線上好友 (${onlineCount})`);

                // 更新離線好友數量
                const offlineCount = $('#friends-list .list-group:eq(1) .friend-item').length;
                $('#friends-list .list-group:eq(1) h4').text(`離線好友 (${offlineCount})`);
            }
        }

        // 發送訊息
        function sendMessage() {
            const message = $('#messageInput').val().trim();
            if (message) {
                const selectedFriend = $('.friend-item.selected');
                const friendId = selectedFriend.data('id');

                // TODO: 實作發送訊息的 API 調用

                // 暫時性的本地渲染
                const messageHtml = `
                    <div class="message sent">
                        <div class="message-content">${message}</div>
                    </div>
                `;
                $('.messages-list').append(messageHtml);
                $('#messageInput').val('');

                // 滾動到底部
                $('.messages-container').scrollTop($('.messages-container')[0].scrollHeight);
            }

            // 註冊發送訊息的事件處理
            $('.input-action-btn i.fa-paper-plane').parent().click(sendMessage);
            $('#messageInput').keypress(function (e) {
                if (e.which == 13) {
                    sendMessage();
                }
            });
        }

        //初始化新增好友功能
        function initializeAddFriend() {
            $('#addFriendBtn').click(function () {
                $('#addFriendModal').removeClass('hidden');
            });

            $('.close-btn').click(function () {
                $('#addFriendModal').addClass('hidden');
            });

            // 搜尋用戶
            let searchTimeout;
            $('#userSearchInput').on('input', function () {
                clearTimeout(searchTimeout);
                const keyword = $(this).val().trim();

                if (keyword.length >= 2) {
                    searchTimeout = setTimeout(() => {
                        searchUsers(keyword);
                    }, 500);
                }
            });

            // 搜尋用戶函數
            async function searchUsers(keyword) {
                try {
                    const response = await $.ajax({
                        url: `api/user/getUser?keyword=${encodeURIComponent(keyword)}`,
                        type: 'GET',
                        dataType: 'json'
                    });

                    console.log(response);
                    //renderSearchResults(response);
                } catch (error) {
                    console.error('搜尋失敗:', error);
                }
            }

            // 渲染搜尋結果
            function renderSearchResults(users) {
                const $results = $('.search-results');
                $results.empty();

                if (users.length === 0) {
                    $results.html('<div class="no-results">找不到符合的用戶</div>');
                    return;
                }

                users.forEach(user => {
                    const $userItem = $(`
                        <div class="user-item">
                            <div class="user-info">
                                <img src="/images/default-avatar.png" alt="${user.userName}">
                                <div class="user-details">
                                    <span class="user-name">${user.userName}</span>
                                    <span class="user-email">${user.email}</span>
                                </div>
                            </div>
                            ${getActionButton(user)}
                        </div>
                    `);

                    $results.append($userItem);
                });
            }

            // 根據好友狀態返回對應的按鈕
            function getActionButton(user) {
                switch (user.friendshipStatus) {
                    case 'none':
                        return `<button class="add-friend-btn" data-id="${user.userId}">新增好友</button>`;
                    case 'pending':
                        return '<button class="pending-btn" disabled>等待確認</button>';
                    case 'friends':
                        return '<button class="friends-btn" disabled>已是好友</button>';
                    default:
                        return '';
                }
            }

            // 發送好友請求
            $(document).on('click', '.add-friend-btn', async function () {
                const receiverId = $(this).data('id');
                try {
                    const response = await $.ajax({
                        url: '/api/friend/request',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            receiverId: receiverId,
                            message: '希望能加你為好友'
                        })
                    });

                    if (response.success) {
                        $(this).replaceWith('<button class="pending-btn" disabled>等待確認</button>');
                    }
                } catch (error) {
                    console.error('發送好友請求失敗:', error);
                }
            });
        }

        function logout() {
            // 清除 cookie
            document.cookie = "auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";

            // 清除存儲的用戶信息
            localStorage.removeItem('userInfo');
            sessionStorage.removeItem('userInfo');

            // 重定向到登入頁
            window.location.href = '/User/Login';
        }
    </script>
}