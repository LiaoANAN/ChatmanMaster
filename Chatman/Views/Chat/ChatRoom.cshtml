<link rel="stylesheet" href="~/css/chat_room.min.css" />

<!-- 聊天室區域 -->
<div class="chat-room hidden" id="chat-room">
    <!-- 聊天室標題 -->
    <div class="chat-header">
        <div class="chat-user-info">
            <img src="" alt="User avatar" class="chat-user-avatar">
            <div class="chat-user-details">
                <h3 class="chat-user-name"></h3>
                <span class="chat-user-status"></span>
            </div>
        </div>
        <div class="chat-actions">
            <button class="chat-action-btn" title="清除聊天記錄" id="btnClearChat">
                <i class="fas fa-trash"></i>
            </button>
            <button class="chat-action-btn" title="顯示更多操作" id="btnMoreOptions">
                <i class="fas fa-ellipsis-v"></i>
            </button>
        </div>
    </div>

    <!-- 聊天記錄區域 -->
    <div class="messages-container">
        <!-- 載入更多按鈕 -->
        <div class="load-more hidden">
            <button id="btnLoadMore" class="load-more-btn">
                載入更多訊息
            </button>
        </div>
        <div class="messages-list" id="messages-list">
            <!-- 訊息列表會動態插入這裡 -->
        </div>
    </div>

    <!-- 檔案預覽區域 -->
    <div id="filePreview" class="file-preview hidden">
        <div class="preview-content">
            <!-- 檔案預覽 -->
            <div id="previewFile" class="hidden">
                <div class="file-info">
                    <i class="fas fa-file"></i>
                    <span id="fileName">fileName.txt</span>
                    <span id="fileSize">(123 KB)</span>
                </div>
            </div>

            <div class="preview-actions">
                <button class="preview-action-btn" id="btnCancelUpload">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>

    <div id="imagePreview" class="file-preview hidden image-preview">
        <div class="preview-content">
            <img src="" alt="preview" id="previewImage">
            <div class="preview-actions">
                <button class="preview-action-btn" id="removePreview">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- 輸入區域 -->
    <div class="input-area">
        <div class="input-container">
            <div class="function-btn">
                <button type="button" class="input-action-btn" id="btnFileUpload" title="附加檔案">
                    <i class="fas fa-paperclip"></i>
                </button>
                <button class="input-action-btn" id="btnImageUpload" title="上傳圖片">
                    <i class="fas fa-image"></i>
                </button>
            </div>
            <input type="file" id="imageInput" accept="image/*" class="hidden">
            <input type="file" id="fileInput" class="hidden">

            <textarea id="messageInput"
                      placeholder="輸入訊息..."
                      rows="1"
                      data-max-rows="5"></textarea>

            <button class="input-action-btn" id="btnSend" title="發送訊息">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>

<!-- 更多操作選單 -->
<div class="chat-more-options hidden" id="moreOptionsMenu">
    <div class="option-item" id="blockUserOption">
        <i class="fas fa-ban"></i>
        <span>封鎖用戶</span>
    </div>
    <div class="option-item" id="reportUserOption">
        <i class="fas fa-flag"></i>
        <span>檢舉用戶</span>
    </div>
    <div class="option-item" id="removeFriendOption">
        <i class="fas fa-user-times"></i>
        <span>移除好友</span>
    </div>
</div>

<!-- 修改後的文字訊息模板 - 添加頭像支持 -->
<template id="message-template">
    <div class="message" data-message-id="">
        <div class="message-avatar">
            <img src="" alt="avatar" class="user-avatar">
        </div>
        <div class="message-content">
            <div class="message-text"></div>
            <div class="message-info">
                <span class="message-time"></span>
                <span class="message-status"></span>
            </div>
        </div>
    </div>
</template>

<!-- 修改後的圖片訊息模板 - 添加頭像支持 -->
<template id="image-message-template">
    <div class="message" data-message-id="">
        <div class="message-avatar">
            <img src="" alt="avatar" class="user-avatar">
        </div>
        <div class="message-content">
            <div class="message-image">
                <img src="" alt="image message" loading="lazy" class="message-img">
            </div>
            <div class="message-info">
                <span class="message-time"></span>
                <span class="message-status"></span>
            </div>
        </div>
    </div>
</template>

<!-- 檔案訊息模板 - 添加頭像支持 -->
<template id="file-message-template">
    <div class="message" data-message-id="">
        <div class="message-avatar">
            <img src="" alt="avatar" class="user-avatar">
        </div>
        <div class="message-content">
            <div class="message-file">
                <div class="file-icon">
                    <i class="fas"></i>
                </div>
                <div class="file-details">
                    <div class="file-name"></div>
                    <div class="file-size"></div>
                </div>
                <div class="file-download" data-url="" data-name="">
                    <i class="fas fa-download"></i>
                </div>
            </div>
            <div class="message-info">
                <span class="message-time"></span>
                <span class="message-status"></span>
            </div>
        </div>
    </div>
</template>

<!-- 圖片查看器模態框 -->
<div id="imageViewerModal" class="modal hidden">
    <div class="image-viewer-container">
        <div class="image-viewer-header">
            <span class="image-title"></span>
            <button class="close-btn" id="closeImageViewer">&times;</button>
        </div>
        <div class="image-viewer-content">
            <img src="" alt="全螢幕圖片" id="fullscreenImage">
        </div>
        <div class="image-viewer-controls">
            <button class="control-btn" id="zoomOutBtn" title="縮小" data-type="image-btn">
                <i class="fas fa-search-minus" data-type="image-btn"></i>
            </button>
            <button class="control-btn" id="zoomResetBtn" title="重設" data-type="image-btn">
                <i class="fas fa-sync-alt" data-type="image-btn"></i>
            </button>
            <button class="control-btn" id="zoomInBtn" title="放大" data-type="image-btn">
                <i class="fas fa-search-plus" data-type="image-btn"></i>
            </button>
            <button class="control-btn" id="downloadBtn" title="下載" data-type="image-btn">
                <i class="fas fa-download" data-type="image-btn"></i>
            </button>
        </div>
    </div>
</div>

<script>
    // 初始化變數
    let currentPage = 1;
    let isLoading = false;
    let hasMoreMessages = true;
    let currentFriendId = null;
    let hasLoadedAllNewerMessages = true;
    let isFirstNewerLoad = true;

    function initializeChatRoom() {
        // 監聽接收訊息事件
        connection.on("ReceiveMessage", function (message) {
            // 檢查當前是否正在與發送者聊天
            const currentChatId = $('.friend-item.selected').data('id');
            if (currentChatId && currentChatId === message.senderId) {
                // 如果是，直接添加訊息到聊天視窗
                addMessageToChat(message, false);

                // 將訊息標記為已讀
                markMessagesAsRead(message.senderId);
            } else {
                // 如果不是，更新好友列表中的未讀訊息計數
                updateUnreadMessageCount(message.senderId);

                // 顯示 toast 通知
                showToastNotification(`收到來自 ${message.senderName} 的新訊息`);
            }
        });

        // 監聽訊息發送成功事件
        connection.on("MessageSent", function (message) {
            // 更新 UI 中的訊息狀態
            updateMessageStatus(message.messageId, true);
        });

        // 註冊發送訊息的事件處理
        $('#btnSend').click(sendMessage);
        $('#messageInput').keypress(function (e) {
            if (e.which == 13 && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // 註冊附件按鈕點擊事件
        $('#btnImageUpload').click(function() {
            $('#imageInput').click();
        });

        // 註冊檔案選擇事件
        $('#imageInput').on('change', function (e) {
            const file = e.target.files[0];
            if (!file) return;

            // 檢查是否為圖片
            if (!file.type.startsWith('image/')) {
                alert('請選擇圖片檔案');
                $(this).val(''); // 清空選擇
                return;
            }

            // 檢查檔案大小 (5MB 上限)
            if (file.size > 5 * 1024 * 1024) {
                alert('圖片大小不能超過 5MB');
                $(this).val(''); // 清空選擇
                return;
            }

            // 預覽選擇的圖片
            previewImage(file);
        });

        // 移除預覽按鈕事件
        $('#removePreview').click(function () {
            $('#imagePreview').addClass('hidden');
            $('#imageInput').val(''); // 清空檔案選擇
        });

        $('#btnLoadMore').click(function () {
            loadMoreMessages();
        });

        // 檢查元素是否存在
        const $messageInput = $('#messageInput');
        if ($messageInput.length === 0) {
            return;
        }
        const $btnSend = $('#btnSend');
        const $messagesList = $('#messages-list');
        const $messagesContainer = $('.messages-container');

        // 自動調整高度
        function adjustTextareaHeight() {
            const element = $messageInput[0];
            element.style.height = 'auto';
            const maxHeight = 100;
            element.style.height = Math.min(element.scrollHeight, maxHeight) + 'px';
        }

        function formatTime(date) {
            if (!date || isNaN(date.getTime())) {
                return '剛剛';
            }

            const now = new Date();
            const diff = Math.floor((now - date) / 1000); // 差異秒數

            // 檢查是否為同一天
            const isSameDay =
                date.getDate() === now.getDate() &&
                date.getMonth() === now.getMonth() &&
                date.getFullYear() === now.getFullYear();

            if (isSameDay) {
                // 如果是今天的消息，只顯示時間
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                return `${hours}:${minutes}`;
            } else if (diff < 86400 * 7) { // 一週內
                // 顯示星期幾
                const dayNames = ['週日', '週一', '週二', '週三', '週四', '週五', '週六'];
                const dayName = dayNames[date.getDay()];
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                return `${dayName} ${hours}:${minutes}`;
            } else {
                // 超過一週，顯示完整日期
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');

                // 如果是去年或更早的消息，顯示年份
                if (date.getFullYear() < now.getFullYear()) {
                    return `${year}/${month}/${day} ${hours}:${minutes}`;
                } else {
                    // 當年的消息不顯示年份
                    return `${month}/${day} ${hours}:${minutes}`;
                }
            }
        }

        // 直接使用 jQuery 的 on 方法綁定事件
        $messageInput.on('input', function (e) {
            adjustTextareaHeight();
        });

        $messageInput.on('keydown', function (e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
                return false;
            }
        });

        $btnSend.on('click', function (e) {
            e.preventDefault();
            sendMessage();
        });

        // 添加滾動事件監聽
        let getMessageTimeout;
        $messagesContainer.on('scroll', function () {
            clearTimeout(getMessageTimeout);

            // 防止同時觸發多次載入
            if (shouldPreventScroll() || window.isScrollingToSpecificMessage) return;

            const container = $(this);
            const scrollPosition = container.scrollTop();

            if (scrollPosition <= 50 && !isLoading && hasMoreMessages) {
                loadMoreMessages();
            }
        });

        // 暴露給外部使用的方法
        window.chatRoomFunctions = {
            loadChatHistory: loadChatHistory
        };

        $(document).on('click', '.back-button', function () {
            // 隱藏聊天室，顯示側邊欄
            $('.sidebar').removeClass('mobile-hidden');
            $('.main-content').removeClass('mobile-active');
            $('#chat-room').addClass('hidden');
            $('#welcome-message').removeClass('hidden');
        });

        // 窗口大小變化時的響應
        $(window).on('resize', function () {
            if (window.innerWidth > 768) {
                // 如果是大螢幕，確保側邊欄和主內容區域都顯示正常
                $('.sidebar').removeClass('mobile-hidden');
                $('.main-content').removeClass('mobile-active');
            } else {
                // 如果是手機螢幕並且聊天室是活動的
                if (!$('#chat-room').hasClass('hidden')) {
                    $('.sidebar').addClass('mobile-hidden');
                    $('.main-content').addClass('mobile-active');
                }
            }
        });

        $(document).on('click', '.file-download', function (e) {
            e.preventDefault();
            e.stopPropagation();

            const fileUrl = $(this).data('url');
            const fileName = $(this).data('name');

            console.log('点击下载按钮:', fileUrl, fileName);

            if (fileUrl && fileName) {
                downloadFile(fileUrl, fileName);
            } else {
                console.error('下载失败: 缺少URL或文件名');
                alert('下载失败: 缺少URL或文件名');
            }
        });

        initializeMobileChatView();

        initializeImageViewer();

        initializeFileUpload();
    }

    function initializeMobileChatView() {
        // 檢查是否為手機尺寸，並設置相應的初始狀態
        if (window.innerWidth <= 768) {
            if (!$('#chat-room').hasClass('hidden')) {
                $('.sidebar').addClass('mobile-hidden');
                $('.main-content').addClass('mobile-active');
            }
        }
    }

    // 開啟聊天室
    function openChatRoom(friendElement) {
        const friendId = friendElement.data('id');
        const friendName = friendElement.find('.friend-name').text();
        const friendAvatar = friendElement.find('img').attr('src');
        const isOnline = friendElement.find('.status-dot').hasClass('online');
        currentFriendId = friendId;

        // 更新聊天室信息
        $('.chat-user-name').text(friendName);
        $('.chat-user-avatar').attr('src', friendAvatar);
        $('.chat-user-status').text(isOnline ? '在線' : '離線');

        // 隱藏歡迎訊息，顯示聊天室
        $('#welcome-message').addClass('hidden');
        $('#chat-room').removeClass('hidden');

        // 載入聊天記錄
        loadChatHistory(friendId, true);

        // 在移動設備上，隱藏側邊欄
        if (window.innerWidth <= 768) {
            $('.sidebar').addClass('mobile-hidden');
            $('.main-content').addClass('mobile-active');

            // 添加返回按鈕到聊天頭部
            if ($('.chat-header .back-button').length === 0) {
                $('.chat-header').prepend(
                    '<button class="back-button chat-action-btn">' +
                    '<i class="fas fa-arrow-left"></i>' +
                    '</button>'
                );
            }
        }
    }

    // 傳送訊息
    function sendMessage() {
        const messageInput = $('#messageInput');
        const message = messageInput.val().trim();
        const selectedFriend = $('.friend-item.selected');

        if (!selectedFriend.length) {
            alert('請先選擇一個聊天對象');
            return;
        }

        const friendId = selectedFriend.data('id');

        // 檢查是否有文字訊息或文件預覽
        let hasImagePreview = !$('#imagePreview').hasClass('hidden');
        let hasFilePreview = !$('#filePreview').hasClass('hidden');

        if (!message && !hasImagePreview && !hasFilePreview) {
            return;
        }

        // 獲取當前用戶信息
        const userInfo = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo'));

        if (hasImagePreview) {
            // 處理圖片訊息
            const imageInput = $('#imageInput')[0];
            if (imageInput.files && imageInput.files[0]) {
                const file = imageInput.files[0];
                uploadImage(file, friendId, userInfo);
            }
        }
        else if (hasFilePreview) {
            // 處理檔案訊息
            const fileInput = $("#fileInput")[0];
            if (fileInput.files && fileInput.files[0]) {
                const file = fileInput.files[0];
                uploadFile(file, friendId, userInfo);
            }
        } else {
            // 處理文字訊息
            connection.invoke("SendMessage", {
                senderId: userInfo.userId,
                receiverId: friendId,
                content: message,
                messageType: "text"
            }).catch(function (err) {
                console.error(err);
                alert('發送訊息失敗');
            });

            // 添加訊息到聊天視窗（樂觀更新 UI）
            const tempMessage = {
                messageId: 'temp-' + Date.now(),
                senderId: userInfo.userId,
                senderName: userInfo.userName,
                senderAvatar: userInfo.userImage,
                content: message,
                messageType: 'text',
                createDate: new Date(),
                isRead: false
            };

            addMessageToChat(tempMessage, true);
        }

        // 清空輸入框和預覽
        messageInput.val('');
        $('#imagePreview').addClass('hidden');
        $('#imageInput').val('');
        $('#filePreview').addClass('hidden');
        $('#previewFile').addClass('hidden');
        $('#fileInput').val('');

        // 調整輸入框高度
        messageInput.css('height', 'auto');

        // 更新聊天室
        if (currentPage > 1){
            loadChatHistory(friendId, false);
        }
    }

    // 確保有這個函數用於滾動到底部
    function scrollToBottom(smooth = true) {
        const container = $('.messages-container');
        const scrollHeight = container[0].scrollHeight;

        if (smooth) {
            container.animate({
                scrollTop: scrollHeight
            }, 200);
        } else {
            container.scrollTop(scrollHeight);
        }
    }

    // 上傳圖片
    function uploadImage(file, friendId, userInfo) {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('receiverId', friendId);
        formData.append('fileType', "image");

        $.ajax({
            url: '/api/chat/uploadFile',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    // 使用 SignalR 發送圖片訊息
                    connection.invoke("SendMessage", {
                        senderId: userInfo.userId,
                        receiverId: friendId,
                        content: response.data.url,
                        messageType: "image"
                    }).catch(function (err) {
                        console.error(err);
                        alert('發送訊息失敗');
                    });

                    // 添加圖片訊息到聊天視窗
                    const tempMessage = {
                        messageId: 'temp-' + Date.now(),
                        senderId: userInfo.userId,
                        senderName: userInfo.userName,
                        senderAvatar: userInfo.userImage,
                        content: response.data.url,
                        messageType: 'image',
                        createDate: new Date(),
                        isRead: false
                    };

                    addMessageToChat(tempMessage, true);
                } else {
                    alert('上傳圖片失敗: ' + response.message);
                }
            },
            error: function(xhr, status, error) {
                alert('上傳圖片失敗: ' + error);
            }
        });
    }

    // 預覽圖片
    function previewImage(file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            $('#previewImage').attr('src', e.target.result);
            $('#imagePreview').removeClass('hidden');
        };
        reader.readAsDataURL(file);
    }

    function uploadFile(file, friendId, userInfo) {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('receiverId', friendId);
        formData.append('fileType', "file");
        formData.append('fileName', file.name); // 添加文件名
        formData.append('fileSize', file.size); // 添加文件大小

        $.ajax({
            url: '/api/chat/uploadFile',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    connection.invoke("SendMessage", {
                        senderId: userInfo.userId,
                        receiverId: friendId,
                        content: response.data.url,
                        messageType: "file",
                        fileName: file.name,
                        fileSize: file.size
                    }).catch(function (err) {
                        console.error(err);
                        alert('發送訊息失敗');
                    });

                    // 添加圖片訊息到聊天視窗
                    const tempMessage = {
                        messageId: 'temp-' + Date.now(),
                        senderId: userInfo.userId,
                        senderName: userInfo.userName,
                        senderAvatar: userInfo.userImage,
                        content: response.data.url,
                        messageType: 'file',
                        fileName: file.name,
                        fileSize: file.size,
                        createDate: new Date(),
                        isRead: false
                    };

                    addMessageToChat(tempMessage, true);
                } else {
                    alert('上傳文件失敗: ' + response.message);
                }
            },
            error: function(xhr, status, error) {
                alert('上傳文件失敗: ' + error);
            }
        });
    }

    // 渲染訊息
    function renderMessages(messages, preserveScroll = false) {
        const userInfo = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo'));
        const messagesContainer = $('#messages-list');

        // 如果需要保留滾動位置，記住當前的滾動信息
        let scrollPosition = 0;
        let scrollHeight = 0;

        if (preserveScroll) {
            const $container = $('.messages-container');
            scrollPosition = $container.scrollTop();
            scrollHeight = $container[0].scrollHeight;
            containerHeight = $container.height();
        }

        // 清空容器（除非要保留滾動位置）
        if (!preserveScroll) {
            messagesContainer.empty();
        }

        // 按時間排序（從舊到新）
        messages.sort((a, b) => new Date(a.createDate) - new Date(b.createDate));

        // 添加訊息到容器
        messages.forEach(message => {
            const isSent = message.senderId == userInfo.userId;
            if (message.messageType === 'image') {
                // 圖片訊息
                const template = document.getElementById('image-message-template');
                const messageDiv = document.importNode(template.content, true);

                const messageElement = $(messageDiv).find('.message');
                messageElement.addClass(isSent ? 'sent' : 'received');
                messageElement.attr('data-message-id', message.messageId);
                messageElement.attr('data-is-read', message.isRead ? "true" : "false");
                messageElement.attr('data-sender-id', message.senderId); // 添加發送者ID

                // 設置頭像
                if (!isSent) {
                    messageElement.find('.message-avatar img').attr('src', message.senderAvatar);
                }

                // 設置圖片
                messageElement.find('.message-image img.message-img').attr('src', message.content);
                messageElement.find('.message-time').text(formatTimeForMessage(new Date(message.createDate)));

                messagesContainer.append(messageElement);
            }
            else if (message.messageType === 'file') {
                const template = document.getElementById('file-message-template');
                const messageDiv = document.importNode(template.content, true);

                const messageElement = $(messageDiv).find('.message');
                messageElement.addClass(isSent ? 'sent' : 'received');
                messageElement.attr('data-message-id', message.messageId);
                messageElement.attr('data-is-read', message.isRead ? "true" : "false");
                messageElement.attr('data-sender-id', message.senderId); // 添加發送者ID

                // 設置頭像
                if (!isSent) {
                    messageElement.find('.message-avatar img').attr('src', message.senderAvatar);
                }

                const fileUrl = message.content;
                let fileName = "未知文件";

                if (fileUrl) {
                    const urlParts = fileUrl.split('/');
                    if (urlParts.length > 0) {
                        fileName = urlParts[urlParts.length - 1];
                        fileName = decodeURIComponent(fileName);
                    }
                }

                if (message.fileName) {
                    fileName = message.fileName;
                }

                const iconClass = getFileIcon(fileName);
                const fileTypeClass = getFileIconClass(fileName);

                let fileSizeDisplay = "未知大小";
                if (message.fileSize) {
                    fileSizeDisplay = formatFileSize(message.fileSize);
                }

                messageElement.find('.file-icon i').addClass(iconClass);
                messageElement.find('.file-name').text(fileName);
                messageElement.find('.file-size').text(fileSizeDisplay);
                messageElement.find('.file-download').attr('data-url', fileUrl);
                messageElement.find('.file-download').attr('data-name', fileName);

                messageElement.find('.message-time').text(formatTimeForMessage(new Date(message.createDate)));

                messagesContainer.append(messageElement);
            }
            else {
                // 文字訊息
                const template = document.getElementById('message-template');
                const messageDiv = document.importNode(template.content, true);

                const messageElement = $(messageDiv).find('.message');
                messageElement.addClass(isSent ? 'sent' : 'received');
                messageElement.attr('data-message-id', message.messageId);
                messageElement.attr('data-is-read', message.isRead ? "true" : "false");
                messageElement.attr('data-sender-id', message.senderId); // 添加發送者ID

                // 設置頭像
                if (!isSent) {
                    messageElement.find('.message-avatar img').attr('src', message.senderAvatar);
                }

                // 設置訊息文字
                messageElement.find('.message-text').text(message.content);
                messageElement.find('.message-time').text(formatTimeForMessage(new Date(message.createDate)));

                if (isSent) {
                    messageElement.find('.message-status').html('<i class="fas fa-check"></i>');
                }

                messagesContainer.append(messageElement);
            }
        });

        // 如果需要保留滾動位置，恢復滾動位置
        if (preserveScroll) {
            const $container = $('.messages-container');
            const newScrollHeight = $container[0].scrollHeight;

            // 計算高度差並調整滾動位置
            const heightDifference = newScrollHeight - scrollHeight;

            $container.scrollTop(scrollPosition + heightDifference);
        }
    }

    // 添加訊息到聊天視窗
    function addMessageToChat(message, isSent) {
        const messagesContainer = $('#messages-list');
        let messageTemplate;

        if (message.messageType === 'image') {
            // 使用圖片訊息模板
            const template = document.getElementById('image-message-template');
            const messageDiv = document.importNode(template.content, true);

            const messageElement = $(messageDiv).find('.message');
            messageElement.addClass(isSent ? 'sent' : 'received');
            messageElement.attr('data-message-id', message.messageId);

            messageElement.find('img').attr('src', message.content);
            messageElement.find('.message-time').text(formatTimeForMessage(new Date(message.createDate)));

            messagesContainer.append(messageElement);
        }
        else if (message.messageType === 'file') {
            const template = document.getElementById('file-message-template');
            const messageDiv = document.importNode(template.content, true);

            const messageElement = $(messageDiv).find('.message');
            messageElement.addClass(isSent ? 'sent' : 'received');
            messageElement.attr('data-message-id', message.messageId);

            if (!isSent) {
                messageElement.find('.message-avatar img').attr('src', message.senderAvatar);
            }

            let fileName = "未知文件";
            if (message.fileName) {
                fileName = message.fileName;
            } else if (message.content) {
                const urlParts = message.content.split('/');
                if (urlParts.length > 0) {
                    fileName = decodeURIComponent(urlParts[urlParts.length - 1]);
                }
            }

            const iconClass = getFileIcon(fileName);
            messageElement.find('.file-icon i').addClass(iconClass);

            messageElement.find('.file-name').text(fileName);

            let fileSizeText = "未知大小";
            if (message.fileSize) {
                fileSizeText = formatFileSize(message.fileSize);
            }
            messageElement.find('.file-size').text(fileSizeText);

            const fileUrl = message.content;
            messageElement.find('.file-download').attr('data-url', fileUrl);
            messageElement.find('.file-download').attr('data-name', fileName);

            messageElement.find('.message-time').text(formatTimeForMessage(new Date(message.createDate)));

            messagesContainer.append(messageElement);
        } else {
            // 使用文字訊息模板
            const template = document.getElementById('message-template');
            const messageDiv = document.importNode(template.content, true);

            const messageElement = $(messageDiv).find('.message');
            messageElement.addClass(isSent ? 'sent' : 'received');
            messageElement.attr('data-message-id', message.messageId);

            if (!isSent) {
                messageElement.find('.message-avatar img').attr('src', message.senderAvatar);
            }

            messageElement.find('.message-text').text(message.content);
            messageElement.find('.message-time').text(formatTimeForMessage(new Date(message.createDate)));

            if (isSent) {
                messageElement.find('.message-status').html('<i class="fas fa-check"></i>');
            }

            messagesContainer.append(messageElement);
        }

        // 更新消息列表（如果需要）
        if (messagesList) {
            messagesList.push(message);
        }

        // 將聊天視窗滾動到底部
        scrollToBottom();
    }

    // 載入聊天記錄
    async function loadChatHistory(friendId, scrollToUnread = false, targetMessageId = null) {
        currentFriendId = friendId;
        currentPage = 1;
        isLoading = true;
        hasMoreMessages = true;
        hasMoreNewerMessages = true;
        isFirstNewerLoad = true;

        // 清空訊息列表
        $('#messages-list').empty();
        messagesList = [];

        try {
            let messageFound = false;

            //若需要搜尋訊息，則先取得訊息所在頁數
            if (targetMessageId) {
                const messagePageResponse = await $.ajax({
                    url: `/api/chat/findMessagePage?friendId=${friendId}&messageId=${targetMessageId}&pageSize=20`,
                    type: 'GET'
                })

                if (messagePageResponse.success && messagePageResponse.data) {
                    currentPage = messagePageResponse.data.pageNumber;
                    messageFound = true;
                } else {
                    console.warn(`無法找到目標訊息: ${targetMessageId}`);
                }
            }

            const response = await $.ajax({
                url: `/api/chat/history?friendId=${friendId}&pageSize=20&pageNumber=${currentPage}`,
                type: 'GET'
            });

            if (response.success) {
                // 取得當前用戶信息
                const userInfo = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo'));

                // 添加訊息到聊天視窗
                if (response.data.length > 0) {
                    messagesList = response.data;
                    renderMessages(response.data);

                    // 將未讀訊息標記為已讀
                    markMessagesAsRead(friendId);

                    // 判斷是否還有更多訊息
                    if (response.data.length < 20) {
                        hasMoreMessages = false;
                        $('.load-more').addClass('hidden');
                    } else {
                        $('.load-more').removeClass('hidden');
                    }

                    // 根據情況決定滾動位置
                    if (targetMessageId && messageFound) {
                        addScrollTimer(() => {
                            const $message = $(`.message[data-message-id="${targetMessageId}"]`);
                            if ($message.length) {
                                scrollToMessage(targetMessageId);
                            } else {
                                addScrollTimer(() => {
                                    const $retryMessage = $(`.message[data-message-id="${targetMessageId}"]`);
                                    if ($retryMessage.length) {
                                        scrollToMessage(targetMessageId);
                                    } else {
                                        console.error(`無法找到訊息元素，滾動到底部`);
                                        if (!window.isScrollingToSpecificMessage) {
                                            scrollToBottom();
                                        }
                                    }
                                }, 1000);
                            }
                        }, 500);

                        // 如果是較早的頁面，載入後續頁面以顯示最新訊息
                        if (currentPage > 1) {
                            addScrollTimer(() => {
                                if (!window.isScrollingToSpecificMessage) {
                                    loadLatestMessages(friendId, currentPage);
                                }
                            }, 3000);
                        }
                    } else if (scrollToUnread) {
                        addScrollTimer(() => {
                            if (!window.isScrollingToSpecificMessage) {
                                scrollToFirstUnreadMessage(userInfo.userId);
                            }
                        }, 300);
                    } else {
                        if (!window.isScrollingToSpecificMessage) {
                            scrollToBottom();
                        }
                    }
                } else {
                    console.log("沒有聊天記錄");
                    hasMoreMessages = false;
                    $('.load-more').addClass('hidden');
                }
            } else {
                console.error('獲取聊天記錄失敗：', response.message);
            }
        } catch (error) {
            console.error('獲取聊天記錄失敗：', error);
        } finally {
            isLoading = false;
        }
    }

    // 滾動到特定訊息
    function scrollToMessage(messageId) {
        // 取消所有可能影響滾動的計時器
        clearAllScrollTimers();

        // 添加一個標記，表示我們正在進行特定訊息滾動
        window.isScrollingToSpecificMessage = true;

        // 找到目標訊息元素
        const $message = $(`.message[data-message-id="${messageId}"]`);

        if ($message.length) {
            console.log("找到目標訊息元素, ID:", messageId);

            // 找到訊息容器
            const $messagesContainer = $('.messages-container');

            // 保存當前滾動位置
            const currentScroll = $messagesContainer.scrollTop();

            // 計算訊息元素相對於容器的位置
            const messageOffset = $message.offset().top;
            const containerOffset = $messagesContainer.offset().top;
            const relativeOffset = messageOffset - containerOffset;

            // 計算需要滾動的位置，讓訊息顯示在容器的 1/3 處
            const containerHeight = $messagesContainer.height();
            const targetPosition = currentScroll + relativeOffset - (containerHeight / 3);

            // 使用動畫滾動到目標位置
            $messagesContainer.animate({
                scrollTop: targetPosition
            }, 300, function () {
                console.log("滾動完成，位置:", $messagesContainer.scrollTop());

                // 高亮顯示訊息
                $message.addClass('highlight-message');

                // 設置一個延時，在一段時間後移除高亮效果
                setTimeout(() => {
                    $message.removeClass('highlight-message');
                    // 完成後清除標記
                    window.isScrollingToSpecificMessage = false;
                }, 3000);

                // 阻止其他滾動事件一段時間
                preventScrollEvents(3000);
            });
        } else {
            console.warn("找不到目標訊息元素, ID:", messageId);
            window.isScrollingToSpecificMessage = false;
        }
    }

    // 阻止其他滾動事件
    function preventScrollEvents(duration) {
        window.preventScrollUntil = Date.now() + duration;
    }

    // 檢查是否應該阻止滾動事件
    function shouldPreventScroll() {
        return window.preventScrollUntil && Date.now() < window.preventScrollUntil;
    }

    // 清除所有可能影響滾動的計時器
    function clearAllScrollTimers() {
        // 清除任何可能存在的滾動計時器
        if (window.scrollTimers) {
            window.scrollTimers.forEach(timer => clearTimeout(timer));
        }
        window.scrollTimers = [];
    }

    // 安全添加計時器（替代 setTimeout）
    function addScrollTimer(callback, delay) {
        if (!window.scrollTimers) window.scrollTimers = [];
        const timerId = setTimeout(() => {
            // 執行回調前先檢查是否應該阻止滾動
            if (!shouldPreventScroll() && !window.isScrollingToSpecificMessage) {
                callback();
            }
        }, delay);
        window.scrollTimers.push(timerId);
        return timerId;
    }

    function highlightMessage($message) {
        // 先移除所有訊息的高亮效果
        $('.message').removeClass('highlight-message');

        // 添加高亮效果到目標訊息
        $message.addClass('highlight-message');

        // 播放高亮動畫
        $message.css('animation', 'none');
        // 觸發reflow
        void $message[0].offsetWidth;
        $message.css('animation', 'highlight-pulse 1.5s ease');

        // 設定計時器，在一段時間後移除高亮效果
        setTimeout(() => {
            $message.removeClass('highlight-message');
        }, 3000);
    }

    // 滾動到第一筆未讀訊息
    function scrollToFirstUnreadMessage(currentUserId) {
        // 找到第一筆來自好友且未讀的訊息
        // 篩選條件：不是當前用戶發送的 且 未讀的訊息
        const $allMessages = $('.message');
        let $firstUnreadMessage = null;

        // 遍歷所有訊息，找到第一個未讀的訊息
        $allMessages.each(function() {
            const $message = $(this);
            const senderId = $message.data('sender-id');
            const isRead = $message.data('is-read') === true || $message.data('is-read') === "true";
            // 確認這條訊息是好友發送的（不是自己發送的）且未讀
            if (senderId != currentUserId && !isRead) {
                console.log(message);
                $firstUnreadMessage = $message;
                console.log("找到第一筆未讀訊息:", $message);
                return false; // 跳出 each 循環
            }
        });

        if ($firstUnreadMessage && $firstUnreadMessage.length) {
            console.log("準備滾動到未讀訊息");

            // 找到了未讀訊息
            const $messagesContainer = $('.messages-container');

            // 獲取相關元素的實際尺寸
            const messageRect = $firstUnreadMessage[0].getBoundingClientRect();
            const containerRect = $messagesContainer[0].getBoundingClientRect();

            // 獲取訊息元素相對於容器的位置
            const messageOffsetTop = $firstUnreadMessage.offset().top - $messagesContainer.offset().top;

            // 計算需要滾動的位置：讓訊息在容器中間偏上位置
            const scrollTo = $messagesContainer.scrollTop() + messageOffsetTop - (containerRect.height * 0.4);

            console.log("滾動計算 - 訊息位置:", messageOffsetTop,
                        "容器高度:", containerRect.height,
                        "計算滾動位置:", scrollTo);

            // 執行滾動
            $messagesContainer.animate({
                scrollTop: scrollTo
            }, 300, function() {
                console.log("滾動完成，最終位置:", $messagesContainer.scrollTop());

                // 高亮顯示該訊息
                $firstUnreadMessage.addClass('highlight');
                setTimeout(() => {
                    $firstUnreadMessage.removeClass('highlight');
                }, 1500);
            });
        } else {
            console.log("沒有找到未讀訊息，滾動到底部");
            // 沒有未讀訊息，滾動到底部
            scrollToBottom();
        }
    }

    // 載入最新訊息（用於確保在查看舊訊息後仍能看到最新對話）
    async function loadLatestMessages(friendId, startPage) {
        try {
            console.log(`載入最新訊息，從第1頁到第${startPage - 1}頁`);

            // 記住滾動位置
            const $messagesContainer = $('.messages-container');
            const scrollPosition = $messagesContainer.scrollTop();
            const scrollHeight = $messagesContainer[0].scrollHeight;

            // 從第1頁開始載入到指定的頁面前一頁
            for (let page = 1; page < startPage; page++) {
                const response = await $.ajax({
                    url: `/api/chat/history?friendId=${friendId}&pageSize=20&pageNumber=${page}`,
                    type: 'GET'
                });

                if (response.success && response.data.length > 0) {
                    // 找出新的訊息（避免重複）
                    const newMessages = response.data.filter(newMsg =>
                        !messagesList.some(existingMsg => existingMsg.messageId === newMsg.messageId)
                    );

                    if (newMessages.length > 0) {
                        console.log(`找到${newMessages.length}條新訊息`);

                        // 記住當前的滾動高度，以便計算高度差
                        const oldScrollHeight = $messagesContainer[0].scrollHeight;

                        // 將新訊息加入列表並重新排序
                        messagesList = [...messagesList, ...newMessages];
                        messagesList.sort((a, b) => new Date(a.createDate) - new Date(b.createDate));

                        // 更新DOM，但不影響滾動位置
                        const shouldPreserveScroll = true;
                        renderMessages(messagesList, shouldPreserveScroll);

                        // 計算新的滾動位置，保持相對位置不變
                        if (shouldPreserveScroll) {
                            const newScrollHeight = $messagesContainer[0].scrollHeight;
                            const heightDifference = newScrollHeight - oldScrollHeight;

                            // 調整滾動位置，保持用戶當前查看的內容在視窗中的相對位置
                            $messagesContainer.scrollTop(scrollPosition + heightDifference);

                            console.log(`調整滾動位置: ${scrollPosition} -> ${scrollPosition + heightDifference}`);
                        }
                    }
                }
            }
        } catch (error) {
            console.error('載入最新訊息失敗：', error);
        }
    }

    // 載入更多歷史訊息（向上加載更多）
    async function loadMoreMessages() {
        if (isLoading || !hasMoreMessages || !currentFriendId) return;

        isLoading = true;
        currentPage++;

        try {
            const response = await $.ajax({
                url: `/api/chat/history?friendId=${currentFriendId}&pageSize=20&pageNumber=${currentPage}`,
                type: 'GET'
            });

            if (response.success) {
                if (response.data.length > 0) {
                    // 保存目前的滾動位置
                    const scrollHeight = $('.messages-container')[0].scrollHeight;
                    const scrollPosition = $('.messages-container').scrollTop();

                    // 合併訊息並重新渲染
                    // 注意：後端API返回的訊息可能按時間降序排列（新的在前），
                    // 但我們希望在畫面上按升序顯示（舊的在前）
                    messagesList = [...response.data, ...messagesList];
                    renderMessages(messagesList);

                    // 恢復原來的滾動位置
                    const newScrollHeight = $('.messages-container')[0].scrollHeight;
                    $('.messages-container').scrollTop(newScrollHeight - scrollHeight + scrollPosition);

                    // 判斷是否還有更多訊息
                    if (response.data.length < 20) {
                        hasMoreMessages = false;
                        $('.load-more').addClass('hidden');
                    }
                } else {
                    hasMoreMessages = false;
                    $('.load-more').addClass('hidden');
                }
            }
        } catch (error) {
            console.error('載入更多訊息失敗：', error);
        } finally {
            isLoading = false;
        }
    }

    // 將訊息標記為已讀
    async function markMessagesAsRead(senderId) {
        try {
            await $.ajax({
                url: '/api/chat/markAsRead',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ senderId: senderId })
            });

            // 更新好友列表中的未讀訊息計數
            updateUnreadMessageCount(senderId, 0);
        } catch (error) {
            console.error('標記訊息為已讀失敗：', error);
        }
    }

    // 更新好友列表中的未讀訊息計數
    async function updateUnreadMessageCount(friendId, count) {
        // 如果沒有提供 count 參數，則從 API 獲取
        if (count === undefined) {
            try {
                const response = await $.ajax({
                    url: `/api/chat/unreadCountFromFriend?friendId=${friendId}`,
                    type: 'GET'
                });

                if (response.success) {
                    count = response.data;
                } else {
                    return;
                }
            } catch (error) {
                console.error('獲取未讀訊息數量失敗：', error);
                return;
            }
        }

        const friendItem = $(`.friend-item[data-id="${friendId}"]`);

        // 更新或移除未讀標記
        if (count > 0) {
            let $badge = friendItem.find('.unread-badge');
            if ($badge.length === 0) {
                friendItem.append(`<span class="unread-badge">${count}</span>`);
            } else {
                $badge.text(count);
            }
        } else {
            friendItem.find('.unread-badge').remove();
        }
    }

    // 更新訊息狀態
    function updateMessageStatus(messageId, delivered) {
        // 找到對應的訊息元素
        const messageElement = $(`[data-message-id="temp-${messageId}"]`);
        if (messageElement.length) {
            // 更新訊息狀態圖示
            if (delivered) {
                messageElement.find('.message-status').html('<i class="fas fa-check"></i>');
            } else {
                messageElement.find('.message-status').html('<i class="fas fa-times"></i>');
            }
        }
    }

    // 格式化時間
    function formatTimeForMessage(date) {
        if (!date || isNaN(date.getTime())) {
            return '剛剛';
        }

        const now = new Date();

        // 檢查是否為同一天
        const isSameDay =
            date.getDate() === now.getDate() &&
            date.getMonth() === now.getMonth() &&
            date.getFullYear() === now.getFullYear();

        if (isSameDay) {
            // 如果是今天的消息，只顯示時間
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            return `${hours}:${minutes}`;
        } else {
            // 計算當前週起始日 (週日)
            const nowWeekStart = new Date(now);
            nowWeekStart.setDate(now.getDate() - now.getDay()); // 設為本週週日
            nowWeekStart.setHours(0, 0, 0, 0); // 設為零點

            // 檢查訊息日期是否是本週的
            const isThisWeek = date >= nowWeekStart;

            if (isThisWeek) {
                // 是本週內的訊息，顯示星期幾
                const dayNames = ['週日', '週一', '週二', '週三', '週四', '週五', '週六'];
                const dayName = dayNames[date.getDay()];
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                return `${dayName} ${hours}:${minutes}`;
            } else {
                // 不是本週的，顯示完整日期
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');

                // 顯示完整西元年日期格式 (YYYY/MM/DD HH:MM)
                return `${year}/${month}/${day} ${hours}:${minutes}`;
            }
        }
    }

    function scrollToBottom() {
        const container = $('.messages-container');
        container.scrollTop(container[0].scrollHeight);
    }

    // 在聊天室初始化時，載入未讀訊息數量
    async function loadUnreadMessageCounts() {
        try {
            const response = await $.ajax({
                url: '/api/chat/unreadCount',
                type: 'GET'
            });

            if (response.success && response.data > 0) {
                // 更新消息按鈕的未讀標記
                const $messageBtn = $('.action-btn i.fa-comment').parent();
                $messageBtn.append(`<span class="notification-badge">${response.data}</span>`);

                // 載入每個好友的未讀訊息數量
                await loadFriendsUnreadCounts();
            }
        } catch (error) {
            console.error('獲取未讀訊息數量失敗：', error);
        }
    }

    // 載入每個好友的未讀訊息數量
    async function loadFriendsUnreadCounts() {
        try {
            const friendItems = $('.friend-item');
            for (let i = 0; i < friendItems.length; i++) {
                const friendId = $(friendItems[i]).data('id');
                await updateUnreadMessageCount(friendId);
            }
        } catch (error) {
            console.error('獲取好友未讀訊息數量失敗：', error);
        }
    }

    // 初始化圖片查看器
    function initializeImageViewer() {
        // 全局變量
        let currentZoom = 1;
        let isDragging = false;
        let startX, startY;
        let translateX = 0, translateY = 0;
        const MIN_ZOOM = 0.5;
        const MAX_ZOOM = 3;
        const ZOOM_STEP = 0.2;

        // 為所有訊息圖片添加點擊事件
        $(document).on('click', '.message-image img', function (e) {
            e.preventDefault();

            // 獲取原始圖片URL
            const imgSrc = $(this).attr('src');

            // 設置全屏圖片
            $('#fullscreenImage').attr('src', imgSrc);

            // 重設縮放和位置
            resetZoom();

            // 顯示圖片名稱（從URL中提取）
            const fileName = imgSrc.split('/').pop();
            $('.image-title').text(fileName);

            // 顯示模態框
            $('#imageViewerModal').removeClass('hidden').addClass('image-viewer-modal');

            // 綁定下載按鈕
            $('#downloadBtn').off('click').on('click', function () {
                downloadImage(imgSrc, fileName);
            });
        });

        // 關閉模態框 - 修正版本
        $(document).on('click', '#closeImageViewer', function () {
            $('#imageViewerModal').addClass('hidden').removeClass('image-viewer-modal');
        });

        // 點擊背景也關閉模態框（但不關閉圖片區域）- 修正版本
        $(document).on('click', '#imageViewerModal', function (e) {
            if (e.target === this) {
                $(this).addClass('hidden').removeClass('image-viewer-modal');
            }
        });

        $('#imageViewerModal').off('click').on('click', function (e) {
            let $targetId = $(e.target).prop("id");
            let $targetType = $(e.target).data("type");
            if ($targetId != "fullscreenImage" && $targetType != "image-btn") {
                $('#imageViewerModal').addClass('hidden');
            }
        });

        // 確保事件不會重複綁定
        $(document).off('keydown.imageViewer').on('keydown.imageViewer', function (e) {
            if ($('#imageViewerModal').hasClass('image-viewer-modal')) {
                switch (e.which) {
                    case 27: // ESC
                        $('#imageViewerModal').addClass('hidden').removeClass('image-viewer-modal');
                        break;
                    // ... 其他按鍵處理保持不變 ...
                }
            }
        });

        // 縮放按鈕
        $('#zoomInBtn').click(function () {
            zoomImage(ZOOM_STEP);
        });

        $('#zoomOutBtn').click(function () {
            zoomImage(-ZOOM_STEP);
        });

        $('#zoomResetBtn').click(function () {
            resetZoom();
        });

        // 拖動圖片功能 - 鼠標事件
        $('#fullscreenImage').mousedown(function (e) {
            if (currentZoom > 1) {
                isDragging = true;
                startX = e.clientX - translateX;
                startY = e.clientY - translateY;
                $(this).addClass('grabbing');
            }
        });

        $(document).mouseup(function () {
            isDragging = false;
            $('#fullscreenImage').removeClass('grabbing');
        });

        $(document).mousemove(function (e) {
            if (isDragging) {
                const newTranslateX = e.clientX - startX;
                const newTranslateY = e.clientY - startY;
                translateX = newTranslateX;
                translateY = newTranslateY;
                $('#fullscreenImage').css('transform', `translate(${translateX}px, ${translateY}px) scale(${currentZoom})`);
            }
        });

        // 縮放圖片函數
        function zoomImage(step) {
            const oldZoom = currentZoom;
            currentZoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, currentZoom + step));

            // 如果縮放級別有變化
            if (oldZoom !== currentZoom) {
                $('#fullscreenImage').css('transform', `translate(${translateX}px, ${translateY}px) scale(${currentZoom})`);

                // 縮放級別大於1時添加縮放標記，否則移除
                if (currentZoom > 1) {
                    $('#fullscreenImage').addClass('zoomed');
                } else {
                    $('#fullscreenImage').removeClass('zoomed');
                    // 如果縮放小於或等於1，重置位置
                    if (currentZoom <= 1) {
                        translateX = 0;
                        translateY = 0;
                        $('#fullscreenImage').css('transform', `scale(${currentZoom})`);
                    }
                }
            }
        }

        // 重設縮放和位置
        function resetZoom() {
            currentZoom = 1;
            translateX = 0;
            translateY = 0;
            $('#fullscreenImage').css('transform', '').removeClass('zoomed grabbing');
        }

        // 下載圖片函數
        function downloadImage(imgSrc, fileName) {
            const link = document.createElement('a');
            link.href = imgSrc;
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // 觸控支持 - 觸摸事件
        const imageElement = document.getElementById('fullscreenImage');
        let lastTouchDistance = 0;

        imageElement.addEventListener('touchstart', function (e) {
            if (e.touches.length === 1 && currentZoom > 1) {
                isDragging = true;
                startX = e.touches[0].clientX - translateX;
                startY = e.touches[0].clientY - translateY;
            } else if (e.touches.length === 2) {
                // 雙指觸控，準備縮放
                const touch1 = e.touches[0];
                const touch2 = e.touches[1];
                lastTouchDistance = Math.hypot(
                    touch2.clientX - touch1.clientX,
                    touch2.clientY - touch1.clientY
                );
            }
        });

        imageElement.addEventListener('touchmove', function (e) {
            e.preventDefault(); // 防止畫面滾動

            if (isDragging && e.touches.length === 1) {
                // 單指移動
                const newTranslateX = e.touches[0].clientX - startX;
                const newTranslateY = e.touches[0].clientY - startY;
                translateX = newTranslateX;
                translateY = newTranslateY;
                imageElement.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentZoom})`;
            } else if (e.touches.length === 2) {
                // 雙指縮放
                const touch1 = e.touches[0];
                const touch2 = e.touches[1];
                const currentDistance = Math.hypot(
                    touch2.clientX - touch1.clientX,
                    touch2.clientY - touch1.clientY
                );

                if (lastTouchDistance > 0) {
                    const distanceDifference = currentDistance - lastTouchDistance;
                    const zoomStep = distanceDifference * 0.01;
                    zoomImage(zoomStep);
                }

                lastTouchDistance = currentDistance;
            }
        });

        imageElement.addEventListener('touchend', function () {
            isDragging = false;
            lastTouchDistance = 0;
        });

        // 支持鍵盤快捷鍵
        $(document).keydown(function (e) {
            if ($('#imageViewerModal').hasClass('image-viewer-modal')) {
                switch (e.which) {
                    case 27: // ESC
                        $('#closeImageViewer').click();
                        break;
                    case 107: // + key
                    case 187: // + key (with shift)
                        $('#zoomInBtn').click();
                        break;
                    case 109: // - key
                    case 189: // - key
                        $('#zoomOutBtn').click();
                        break;
                    case 48: // 0 key
                    case 96: // 0 key (numpad)
                        $('#zoomResetBtn').click();
                        break;
                }
            }
        });
    }

    // 初始化檔案上傳功能
    function initializeFileUpload() {
        // 綁定檔案上傳按鈕事件
        $('#btnFileUpload').click(function () {
            $('#fileInput').click();
        });

        // 處理檔案選擇
        $('#fileInput').change(function (e) {
            $("#imageInput").val("");
            $('#imagePreview').addClass('hidden');

            const file = e.target.files[0];
            if (!file) return;

            // 檢查檔案大小上限 (例如 10MB)
            const maxSize = 10 * 1024 * 1024; // 10MB
            if (file.size > maxSize) {
                errorAlert('檔案過大', '請選擇小於 10MB 的檔案', 2000);
                $(this).val(''); // 清空選擇
                return;
            }

            // 顯示檔案預覽
            showFilePreview(file);
        });

        // 取消上傳
        $('#btnCancelUpload').click(function () {
            cancelFileUpload();
        });

        // 發送訊息時處理檔案上傳
        $('#btnSendMessage').click(function () {
            const messageText = $('#messageInput').val().trim();
            const fileInput = document.getElementById('fileInput');

            const hasFile = fileInput.files.length > 0;
            const hasMessage = messageText.length > 0;

            // 如果沒有任何內容，不發送
            if (!hasMessage && !hasImage && !hasFile) return;

            // 先判斷是否有檔案或圖片要上傳
            if (hasFile) {
                sendFileMessage(fileInput.files[0], messageText);
            } else if (hasMessage) {
                sendTextMessage(messageText);
            }

            // 清空訊息輸入框並禁用發送按鈕
            $('#messageInput').val('').focus();
            $(this).prop('disabled', true);

            // 清空檔案預覽
            cancelFileUpload();
        });
    }

    // 顯示檔案預覽
    function showFilePreview(file) {
        // 格式化檔案大小
        const size = formatFileSize(file.size);

        // 設置檔案資訊
        $('#fileName').text(file.name);
        $('#fileSize').text(`(${size})`);

        // 顯示檔案預覽，隱藏圖片預覽
        $('#previewFile').removeClass('hidden');
        $('.file-preview').removeClass('hidden');

        $('#previewImage').addClass('hidden');
        $('#imagePreview').addClass('hidden');
        $(".image-preview").addClass('hidden');

        // 啟用發送按鈕
        $('#btnSendMessage').prop('disabled', false);
    }

    // 取消檔案上傳
    function cancelFileUpload() {
        // 清空檔案輸入
        $('#fileInput, #imageInput').val('');

        // 隱藏預覽
        $('.file-preview').addClass('hidden');
        $('#previewImage').addClass('hidden');
        $('#previewFile').addClass('hidden');

        // 禁用發送按鈕 (如果訊息框也是空的)
        if ($('#messageInput').val().trim() === '') {
            $('#btnSendMessage').prop('disabled', true);
        }
    }

    // 格式化檔案大小
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';

        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // 獲取檔案圖示類別
    function getFileIconClass(fileName) {
        const extension = fileName.split('.').pop().toLowerCase();

        switch (extension) {
            case 'pdf': return 'pdf';
            case 'doc': case 'docx': return 'doc';
            case 'xls': case 'xlsx': return 'xls';
            case 'ppt': case 'pptx': return 'ppt';
            case 'zip': case 'rar': case '7z': return 'zip';
            case 'txt': return 'txt';
            default: return '';
        }
    }

    // 獲取檔案圖示
    function getFileIcon(fileName) {
        const extension = fileName.split('.').pop().toLowerCase();

        switch (extension) {
            case 'pdf': return 'fa-file-pdf';
            case 'doc': case 'docx': return 'fa-file-word';
            case 'xls': case 'xlsx': return 'fa-file-excel';
            case 'ppt': case 'pptx': return 'fa-file-powerpoint';
            case 'zip': case 'rar': case '7z': return 'fa-file-archive';
            case 'txt': return 'fa-file-alt';
            default: return 'fa-file';
        }
    }

    // 發送檔案訊息
    async function sendFileMessage(file, messageText) {
        try {
            // 獲取當前聊天室資訊
            const userId = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo')).userId;
            const friendId = $('.friend-item.selected').data('id');

            if (!friendId) {
                console.error('未選擇對話對象');
                return;
            }

            // 準備表單數據
            const formData = new FormData();
            formData.append('file', file);
            formData.append('senderId', userId);
            formData.append('receiverId', friendId);
            formData.append('messageType', 'file');
            formData.append('messageContent', messageText || file.name);

            // 顯示上傳中訊息
            const tempMessageId = 'temp-' + Date.now();
            addSelfMessage({
                messageId: tempMessageId,
                messageType: 'file',
                messageContent: file.name,
                fileName: file.name,
                fileSize: file.size,
                createDate: new Date(),
                isUploading: true
            });

            // 發送檔案
            const response = await $.ajax({
                url: '/api/chat/uploadFile',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                xhr: function () {
                    const xhr = new window.XMLHttpRequest();

                    // 上傳進度
                    xhr.upload.addEventListener('progress', function (evt) {
                        if (evt.lengthComputable) {
                            const percentComplete = Math.round((evt.loaded / evt.total) * 100);
                            // 這裡可以更新上傳進度
                            updateUploadProgress(tempMessageId, percentComplete);
                        }
                    }, false);

                    return xhr;
                }
            });

            if (response.success) {
                // 移除臨時訊息
                $(`#${tempMessageId}`).remove();

                // 通過 SignalR 發送訊息通知
                await connection.invoke('SendMessage', {
                    senderId: userId,
                    receiverId: friendId,
                    messageContent: response.data.fileName,
                    messageType: 'file',
                    fileUrl: response.data.mediaUrl,
                    fileName: response.data.fileName,
                    fileSize: response.data.fileSize
                });
            } else {
                // 更新臨時訊息狀態為失敗
                updateMessageStatus(tempMessageId, 'failed');
                errorAlert('檔案上傳失敗', response.message, 2000);
            }
        } catch (error) {
            console.error('發送檔案訊息錯誤:', error);
            errorAlert('檔案上傳失敗', '請稍後再試', 2000);
        }
    }

    // 發送文本訊息
    async function sendTextMessage(text) {
        try {
            // 獲取當前聊天室資訊
            const userId = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo')).userId;
            const friendId = $('.friend-item.selected').data('id');

            if (!friendId) {
                console.error('未選擇對話對象');
                return;
            }

            // 通過 SignalR 發送訊息
            await connection.invoke('SendMessage', {
                senderId: userId,
                receiverId: friendId,
                messageContent: text,
                messageType: 'text'
            });
        } catch (error) {
            console.error('發送文本訊息錯誤:', error);
            errorAlert('發送訊息失敗', '請稍後再試', 2000);
        }
    }

    // 更新上傳進度
    function updateUploadProgress(messageId, percent) {
        const $message = $(`#${messageId}`);
        const $progress = $message.find('.upload-progress');

        if ($progress.length) {
            $progress.css('width', `${percent}%`);
        } else {
            $message.find('.message-status').append(`
                <div class="upload-progress-container">
                    <div class="upload-progress" style="width: ${percent}%"></div>
                </div>
            `);
        }
    }

    // 更新訊息狀態
    function updateMessageStatus(messageId, status) {
        const $message = $(`#${messageId}`);

        if (status === 'sent') {
            $message.find('.message-status').html('<i class="fas fa-check"></i>');
        } else if (status === 'read') {
            $message.find('.message-status').html('<i class="fas fa-check-double"></i>');
        } else if (status === 'failed') {
            $message.find('.message-status').html('<i class="fas fa-exclamation-circle"></i>');
        }
    }

    // 下載檔案
    function downloadFile(url, fileName) {
        if (!url) {
            console.error('下载失败: URL为空');
            return;
        }

        // 处理相对路径URL (如果URL不是以http或https开头，则是相对路径)
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            // 确保URL以/开头
            if (!url.startsWith('/')) {
                url = '/' + url;
            }

            // 获取当前网站的域名作为基础URL
            const baseUrl = window.location.origin;
            url = baseUrl + url;
        }

        console.log('下载文件:', url, fileName);

        // 使用fetch API下载文件
        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.blob();
            })
            .then(blob => {
                // 创建一个临时的URL对象
                const blobUrl = window.URL.createObjectURL(blob);

                // 创建一个链接并模拟点击
                const a = document.createElement('a');
                a.href = blobUrl;
                a.download = fileName || 'download';
                document.body.appendChild(a);
                a.click();

                // 清理
                document.body.removeChild(a);
                window.URL.revokeObjectURL(blobUrl);

                console.log('文件下载成功');
            })
            .catch(error => {
                console.error('文件下载失败:', error);
                alert('下载失败: ' + error.message);
            });
    }

    // 初始化聊天室中的檔案相關事件
    function initializeFileEvents() {
        // 綁定聊天室中檔案下載點擊事件
        $(document).on('click', '.file-download', function (e) {
            e.stopPropagation();
            const fileUrl = $(this).data('url');
            const fileName = $(this).data('name');

            if (fileUrl && fileName) {
                downloadFile(fileUrl, fileName);
            }
        });
    }

    // 渲染檔案訊息
    function renderFileMessage(message) {
        const iconClass = getFileIcon(message.fileName);
        const fileTypeClass = getFileIconClass(message.fileName);
        const fileSize = formatFileSize(message.fileSize);

        return `
            <div class="message-file">
                <div class="file-icon ${fileTypeClass}">
                    <i class="fas ${iconClass}"></i>
                </div>
                <div class="file-details">
                    <div class="file-name">${message.fileName}</div>
                    <div class="file-size">${fileSize}</div>
                </div>
                <div class="file-download" data-url="${message.fileUrl}" data-name="${message.fileName}">
                    <i class="fas fa-download"></i>
                </div>
            </div>
        `;
    }

    // 添加自己發送的訊息到聊天室
    function addSelfMessage(message) {
        let messageContent = '';

        // 根據訊息類型生成內容
        if (message.messageType === 'image') {
            messageContent = `<div class="message-image"><img src="${message.mediaUrl}" class="message-img"></div>`;
        } else if (message.messageType === 'file') {
            const iconClass = getFileIcon(message.fileName);
            const fileTypeClass = getFileIconClass(message.fileName);
            const fileSize = formatFileSize(message.fileSize);

            messageContent = `
                <div class="message-file">
                    <div class="file-icon ${fileTypeClass}">
                        <i class="fas ${iconClass}"></i>
                    </div>
                    <div class="file-details">
                        <div class="file-name">${message.fileName}</div>
                        <div class="file-size">${fileSize}</div>
                    </div>
                    ${message.isUploading ? '' : `
                    <div class="file-download" data-url="${message.fileUrl}" data-name="${message.fileName}">
                        <i class="fas fa-download"></i>
                    </div>
                    `}
                </div>
            `;
        } else {
            messageContent = `<div class="message-text">${message.messageContent}</div>`;
        }

        // 構建訊息 HTML
        const messageHtml = `
            <div class="message sent" id="${message.messageId}">
                <div class="message-content">
                    ${messageContent}
                    <div class="message-info">
                        <span class="message-time">${formatTime(message.createDate)}</span>
                        <span class="message-status">
                            ${message.isUploading ? '<i class="fas fa-spinner fa-spin"></i>' : '<i class="fas fa-check"></i>'}
                        </span>
                    </div>
                </div>
            </div>
        `;

        // 添加到訊息容器
        $('.messages-list').append(messageHtml);

        // 滾動到底部
        scrollToBottom();
    }
</script>