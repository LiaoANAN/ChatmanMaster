<link rel="stylesheet" href="~/css/chat_room.min.css" />

<!-- 聊天室區域 -->
<div class="chat-room hidden" id="chat-room">
    <!-- 聊天室標題 -->
    <div class="chat-header">
        <div class="chat-user-info">
            <img src="" alt="User avatar" class="chat-user-avatar">
            <div class="chat-user-details">
                <h3 class="chat-user-name"></h3>
                <span class="chat-user-status"></span>
            </div>
        </div>
        <div class="chat-actions">
            <button class="chat-action-btn" title="清除聊天記錄" id="btnClearChat">
                <i class="fas fa-trash"></i>
            </button>
            <button class="chat-action-btn" title="顯示更多操作" id="btnMoreOptions">
                <i class="fas fa-ellipsis-v"></i>
            </button>
        </div>
    </div>

    <!-- 聊天記錄區域 -->
    <div class="messages-container">
        <!-- 載入更多按鈕 -->
        <div class="load-more hidden">
            <button id="btnLoadMore" class="load-more-btn">
                載入更多訊息
            </button>
        </div>
        <div class="messages-list" id="messages-list">
            <!-- 訊息列表會動態插入這裡 -->
        </div>
    </div>

    <!-- 檔案預覽區域 -->
    <div id="filePreview" class="file-preview hidden">
        <div class="preview-content">
            <img src="" alt="preview" id="previewImage">
            <div class="preview-actions">
                <button class="preview-action-btn" id="removePreview">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- 輸入區域 -->
    <div class="input-area">
        <div class="input-container">
            <button class="input-action-btn" id="btnAttachment" title="附加檔案">
                <i class="fas fa-paperclip"></i>
            </button>
            <input type="file" id="fileInput" class="hidden" accept="image/*">

            <textarea id="messageInput"
                      placeholder="輸入訊息..."
                      rows="1"
                      data-max-rows="5"></textarea>

            <button class="input-action-btn" id="btnSend" title="發送訊息">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>

<!-- 更多操作選單 -->
<div class="chat-more-options hidden" id="moreOptionsMenu">
    <div class="option-item" id="blockUserOption">
        <i class="fas fa-ban"></i>
        <span>封鎖用戶</span>
    </div>
    <div class="option-item" id="reportUserOption">
        <i class="fas fa-flag"></i>
        <span>檢舉用戶</span>
    </div>
    <div class="option-item" id="removeFriendOption">
        <i class="fas fa-user-times"></i>
        <span>移除好友</span>
    </div>
</div>

<!-- 修改後的文字訊息模板 - 添加頭像支持 -->
<template id="message-template">
    <div class="message" data-message-id="">
        <div class="message-avatar">
            <img src="" alt="avatar" class="user-avatar">
        </div>
        <div class="message-content">
            <div class="message-text"></div>
            <div class="message-info">
                <span class="message-time"></span>
                <span class="message-status"></span>
            </div>
        </div>
    </div>
</template>

<!-- 修改後的圖片訊息模板 - 添加頭像支持 -->
<template id="image-message-template">
    <div class="message" data-message-id="">
        <div class="message-avatar">
            <img src="" alt="avatar" class="user-avatar">
        </div>
        <div class="message-content">
            <div class="message-image">
                <img src="" alt="image message" loading="lazy" class="message-img">
            </div>
            <div class="message-info">
                <span class="message-time"></span>
                <span class="message-status"></span>
            </div>
        </div>
    </div>
</template>

<script>
    function initializeChatRoom() {
        // 監聽接收訊息事件
        connection.on("ReceiveMessage", function (message) {
            // 檢查當前是否正在與發送者聊天
            const currentChatId = $('.friend-item.selected').data('id');
            if (currentChatId && currentChatId === message.senderId) {
                // 如果是，直接添加訊息到聊天視窗
                addMessageToChat(message, false);

                // 將訊息標記為已讀
                markMessagesAsRead(message.senderId);
            } else {
                // 如果不是，更新好友列表中的未讀訊息計數
                updateUnreadMessageCount(message.senderId);

                // 顯示 toast 通知
                showToastNotification(`收到來自 ${message.senderName} 的新訊息`);
            }
        });

        // 監聽訊息發送成功事件
        connection.on("MessageSent", function (message) {
            // 更新 UI 中的訊息狀態
            updateMessageStatus(message.messageId, true);
        });

        // 註冊發送訊息的事件處理
        $('#btnSend').click(sendMessage);
        $('#messageInput').keypress(function (e) {
            if (e.which == 13 && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // 註冊附件按鈕點擊事件
        $('#btnAttachment').click(function() {
            $('#fileInput').click();
        });

        // 檢查元素是否存在
        const $messageInput = $('#messageInput');
        if ($messageInput.length === 0) {
            return;
        }
        const $btnSend = $('#btnSend');
        const $messagesList = $('#messages-list');
        const $messagesContainer = $('.messages-container');

        // 初始化變數
        let currentPage = 1;
        let isLoading = false;
        let hasMoreMessages = true;
        let currentFriendId = null;

        // 自動調整高度
        function adjustTextareaHeight() {
            const element = $messageInput[0];
            element.style.height = 'auto';
            const maxHeight = 100;
            element.style.height = Math.min(element.scrollHeight, maxHeight) + 'px';
        }

        function formatTime(date) {
            if (!date || isNaN(date.getTime())) {
                return '剛剛';
            }

            const now = new Date();
            const diff = Math.floor((now - date) / 1000); // 差異秒數

            // 檢查是否為同一天
            const isSameDay =
                date.getDate() === now.getDate() &&
                date.getMonth() === now.getMonth() &&
                date.getFullYear() === now.getFullYear();

            if (isSameDay) {
                // 如果是今天的消息，只顯示時間
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                return `${hours}:${minutes}`;
            } else if (diff < 86400 * 7) { // 一週內
                // 顯示星期幾
                const dayNames = ['週日', '週一', '週二', '週三', '週四', '週五', '週六'];
                const dayName = dayNames[date.getDay()];
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                return `${dayName} ${hours}:${minutes}`;
            } else {
                // 超過一週，顯示完整日期
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');

                // 如果是去年或更早的消息，顯示年份
                if (date.getFullYear() < now.getFullYear()) {
                    return `${year}/${month}/${day} ${hours}:${minutes}`;
                } else {
                    // 當年的消息不顯示年份
                    return `${month}/${day} ${hours}:${minutes}`;
                }
            }
        }

        // 直接使用 jQuery 的 on 方法綁定事件
        $messageInput.on('input', function (e) {
            adjustTextareaHeight();
        });

        $messageInput.on('keydown', function (e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
                return false;
            }
        });

        $btnSend.on('click', function (e) {
            e.preventDefault();
            sendMessage();
        });

        // 添加滾動事件監聽
        $messagesContainer.on('scroll', function () {
            if ($messagesContainer.scrollTop() <= 50 && !isLoading && hasMoreMessages) {
                loadMoreMessages();
            }
        });

        // 暴露給外部使用的方法
        window.chatRoomFunctions = {
            loadChatHistory: loadChatHistory
        };

        $(document).on('click', '.back-button', function () {
            // 隱藏聊天室，顯示側邊欄
            $('.sidebar').removeClass('mobile-hidden');
            $('.main-content').removeClass('mobile-active');
            $('#chat-room').addClass('hidden');
            $('#welcome-message').removeClass('hidden');
        });

        // 窗口大小變化時的響應
        $(window).on('resize', function () {
            if (window.innerWidth > 768) {
                // 如果是大螢幕，確保側邊欄和主內容區域都顯示正常
                $('.sidebar').removeClass('mobile-hidden');
                $('.main-content').removeClass('mobile-active');
            } else {
                // 如果是手機螢幕並且聊天室是活動的
                if (!$('#chat-room').hasClass('hidden')) {
                    $('.sidebar').addClass('mobile-hidden');
                    $('.main-content').addClass('mobile-active');
                }
            }
        });

        initializeMobileChatView();
    }

    function initializeMobileChatView() {
        // 檢查是否為手機尺寸，並設置相應的初始狀態
        if (window.innerWidth <= 768) {
            if (!$('#chat-room').hasClass('hidden')) {
                $('.sidebar').addClass('mobile-hidden');
                $('.main-content').addClass('mobile-active');
            }
        }
    }

    // 開啟聊天室
    function openChatRoom(friendElement) {
        const friendId = friendElement.data('id');
        const friendName = friendElement.find('.friend-name').text();
        const friendAvatar = friendElement.find('img').attr('src');
        const isOnline = friendElement.find('.status-dot').hasClass('online');

        // 更新聊天室信息
        $('.chat-user-name').text(friendName);
        $('.chat-user-avatar').attr('src', friendAvatar);
        $('.chat-user-status').text(isOnline ? '在線' : '離線');

        // 隱藏歡迎訊息，顯示聊天室
        $('#welcome-message').addClass('hidden');
        $('#chat-room').removeClass('hidden');

        // 載入聊天記錄
        loadChatHistory(friendId);

        // 在移動設備上，隱藏側邊欄
        if (window.innerWidth <= 768) {
            $('.sidebar').addClass('mobile-hidden');
            $('.main-content').addClass('mobile-active');

            // 添加返回按鈕到聊天頭部
            if ($('.chat-header .back-button').length === 0) {
                $('.chat-header').prepend(
                    '<button class="back-button chat-action-btn">' +
                    '<i class="fas fa-arrow-left"></i>' +
                    '</button>'
                );
            }
        }
    }

    // 傳送訊息
    function sendMessage() {
        const messageInput = $('#messageInput');
        const message = messageInput.val().trim();
        const selectedFriend = $('.friend-item.selected');

        if (!selectedFriend.length) {
            alert('請先選擇一個聊天對象');
            return;
        }

        const friendId = selectedFriend.data('id');

        // 檢查是否有文字訊息或文件預覽
        const hasFilePreview = !$('#filePreview').hasClass('hidden');

        if (!message && !hasFilePreview) {
            return;
        }

        // 獲取當前用戶信息
        const userInfo = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo'));

        if (hasFilePreview) {
            // 處理圖片訊息
            const fileInput = $('#fileInput')[0];
            if (fileInput.files && fileInput.files[0]) {
                const file = fileInput.files[0];
                uploadImage(file, friendId, userInfo);
            }
        } else {
            // 處理文字訊息
            // 使用 SignalR 發送訊息
            connection.invoke("SendMessage", {
                senderId: userInfo.userId,
                receiverId: friendId,
                content: message,
                messageType: "text"
            }).catch(function (err) {
                console.error(err);
                alert('發送訊息失敗');
            });

            // 添加訊息到聊天視窗（樂觀更新 UI）
            const tempMessage = {
                messageId: 'temp-' + Date.now(),
                senderId: userInfo.userId,
                senderName: userInfo.userName,
                senderAvatar: userInfo.userImage,
                content: message,
                messageType: 'text',
                createDate: new Date(),
                isRead: false
            };

            addMessageToChat(tempMessage, true);
        }

        // 清空輸入框和預覽
        messageInput.val('');
        $('#filePreview').addClass('hidden');
        $('#fileInput').val('');

        // 調整輸入框高度
        messageInput.css('height', 'auto');
    }

    // 上傳圖片
    function uploadImage(file, friendId, userInfo) {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('receiverId', friendId);

        $.ajax({
            url: '/api/chat/uploadImage',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    // 使用 SignalR 發送圖片訊息
                    connection.invoke("SendMessage", {
                        senderId: userInfo.userId,
                        receiverId: friendId,
                        content: response.data.url,
                        messageType: "image"
                    }).catch(function (err) {
                        console.error(err);
                        alert('發送訊息失敗');
                    });

                    // 添加圖片訊息到聊天視窗
                    const tempMessage = {
                        messageId: 'temp-' + Date.now(),
                        senderId: userInfo.userId,
                        senderName: userInfo.userName,
                        senderAvatar: userInfo.userImage,
                        content: response.data.url,
                        messageType: 'image',
                        createDate: new Date(),
                        isRead: false
                    };

                    addMessageToChat(tempMessage, true);
                } else {
                    alert('上傳圖片失敗: ' + response.message);
                }
            },
            error: function(xhr, status, error) {
                alert('上傳圖片失敗: ' + error);
            }
        });
    }

    // 預覽圖片
    function previewImage(file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            $('#previewImage').attr('src', e.target.result);
            $('#filePreview').removeClass('hidden');
        };
        reader.readAsDataURL(file);
    }

    // 渲染訊息
    function renderMessages(messages) {
        const userInfo = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo'));
        const messagesContainer = $('#messages-list');

        // 清空容器
        messagesContainer.empty();

        // 按時間排序（從舊到新）
        messages.sort((a, b) => new Date(a.createDate) - new Date(b.createDate));

        // 添加訊息到容器
        messages.forEach(message => {
            const isSent = message.senderId == userInfo.userId;
            if (message.messageType === 'image') {
                // 圖片訊息
                const template = document.getElementById('image-message-template');
                const messageDiv = document.importNode(template.content, true);

                const messageElement = $(messageDiv).find('.message');
                messageElement.addClass(isSent ? 'sent' : 'received');
                messageElement.attr('data-message-id', message.messageId);

                // 設置頭像
                if (!isSent) {
                    messageElement.find('.message-avatar img').attr('src', message.senderAvatar);
                }

                // 設置圖片
                messageElement.find('.message-image img.message-img').attr('src', message.content);
                messageElement.find('.message-time').text(formatTimeForMessage(new Date(message.createDate)));

                messagesContainer.append(messageElement);
            } else {
                // 文字訊息
                const template = document.getElementById('message-template');
                const messageDiv = document.importNode(template.content, true);

                const messageElement = $(messageDiv).find('.message');
                messageElement.addClass(isSent ? 'sent' : 'received');
                messageElement.attr('data-message-id', message.messageId);

                // 設置頭像
                if (!isSent) {
                    messageElement.find('.message-avatar img').attr('src', message.senderAvatar);
                }

                // 設置訊息文字
                messageElement.find('.message-text').text(message.content);
                messageElement.find('.message-time').text(formatTimeForMessage(new Date(message.createDate)));

                if (isSent) {
                    messageElement.find('.message-status').html('<i class="fas fa-check"></i>');
                }

                messagesContainer.append(messageElement);
            }
        });

        // 滾動到底部
        scrollToBottom();
    }

    // 添加訊息到聊天視窗
    function addMessageToChat(message, isSent) {
        const messagesContainer = $('#messages-list');
        let messageTemplate;

        if (message.messageType === 'image') {
            // 使用圖片訊息模板
            const template = document.getElementById('image-message-template');
            const messageDiv = document.importNode(template.content, true);

            const messageElement = $(messageDiv).find('.message');
            messageElement.addClass(isSent ? 'sent' : 'received');
            messageElement.attr('data-message-id', message.messageId);

            messageElement.find('img').attr('src', message.content);
            messageElement.find('.message-time').text(formatTimeForMessage(new Date(message.createDate)));

            messagesContainer.append(messageElement);
        } else {
            // 使用文字訊息模板
            const template = document.getElementById('message-template');
            const messageDiv = document.importNode(template.content, true);

            const messageElement = $(messageDiv).find('.message');
            messageElement.addClass(isSent ? 'sent' : 'received');
            messageElement.attr('data-message-id', message.messageId);

            if (!isSent) {
                messageElement.find('.message-avatar img').attr('src', message.senderAvatar);
            }

            messageElement.find('.message-text').text(message.content);
            messageElement.find('.message-time').text(formatTimeForMessage(new Date(message.createDate)));

            if (isSent) {
                messageElement.find('.message-status').html('<i class="fas fa-check"></i>');
            }

            messagesContainer.append(messageElement);
        }

        // 更新消息列表（如果需要）
        if (messagesList) {
            messagesList.push(message);
        }

        // 將聊天視窗滾動到底部
        scrollToBottom();
    }

    // 載入聊天記錄
    async function loadChatHistory(friendId) {
        currentFriendId = friendId;
        currentPage = 1;
        isLoading = true;
        hasMoreMessages = true;

        // 清空訊息列表
        $('#messages-list').empty();
        messagesList = [];

        try {
            console.log(`開始加載聊天記錄，friendId: ${friendId}`);
            const response = await $.ajax({
                url: `/api/chat/history?friendId=${friendId}&pageSize=20&pageNumber=${currentPage}`,
                type: 'GET'
            });

            if (response.success) {
                console.log(`獲取聊天記錄成功，數量: ${response.data.length}`);

                // 取得當前用戶信息
                const userInfo = JSON.parse(localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo'));

                // 添加訊息到聊天視窗
                if (response.data.length > 0) {
                    messagesList = response.data;
                    renderMessages(response.data);

                    // 將未讀訊息標記為已讀
                    markMessagesAsRead(friendId);

                    // 判斷是否還有更多訊息
                    if (response.data.length < 20) {
                        hasMoreMessages = false;
                        $('.load-more').addClass('hidden');
                    } else {
                        $('.load-more').removeClass('hidden');
                    }
                } else {
                    console.log("沒有聊天記錄");
                    hasMoreMessages = false;
                    $('.load-more').addClass('hidden');
                }
            } else {
                console.error('獲取聊天記錄失敗：', response.message);
            }
        } catch (error) {
            console.error('獲取聊天記錄失敗：', error);
        } finally {
            isLoading = false;
        }
    }

    // 載入更多歷史訊息（向上加載更多）
    async function loadMoreMessages() {
        if (isLoading || !hasMoreMessages || !currentFriendId) return;

        isLoading = true;
        currentPage++;

        try {
            const response = await $.ajax({
                url: `/api/chat/history?friendId=${currentFriendId}&pageSize=20&pageNumber=${currentPage}`,
                type: 'GET'
            });

            if (response.success) {
                if (response.data.length > 0) {
                    // 保存目前的滾動位置
                    const scrollHeight = $('.messages-container')[0].scrollHeight;
                    const scrollPosition = $('.messages-container').scrollTop();

                    // 合併訊息並重新渲染
                    // 注意：後端API返回的訊息可能按時間降序排列（新的在前），
                    // 但我們希望在畫面上按升序顯示（舊的在前）
                    messagesList = [...response.data, ...messagesList];
                    renderMessages(messagesList);

                    // 恢復原來的滾動位置
                    const newScrollHeight = $('.messages-container')[0].scrollHeight;
                    $('.messages-container').scrollTop(newScrollHeight - scrollHeight + scrollPosition);

                    // 判斷是否還有更多訊息
                    if (response.data.length < 20) {
                        hasMoreMessages = false;
                        $('.load-more').addClass('hidden');
                    }
                } else {
                    hasMoreMessages = false;
                    $('.load-more').addClass('hidden');
                }
            }
        } catch (error) {
            console.error('載入更多訊息失敗：', error);
        } finally {
            isLoading = false;
        }
    }

    // 將訊息標記為已讀
    async function markMessagesAsRead(senderId) {
        try {
            await $.ajax({
                url: '/api/chat/markAsRead',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ senderId: senderId })
            });

            // 更新好友列表中的未讀訊息計數
            updateUnreadMessageCount(senderId, 0);
        } catch (error) {
            console.error('標記訊息為已讀失敗：', error);
        }
    }

    // 更新好友列表中的未讀訊息計數
    async function updateUnreadMessageCount(friendId, count) {
        // 如果沒有提供 count 參數，則從 API 獲取
        if (count === undefined) {
            try {
                const response = await $.ajax({
                    url: `/api/chat/unreadCountFromFriend?friendId=${friendId}`,
                    type: 'GET'
                });

                if (response.success) {
                    count = response.data;
                } else {
                    return;
                }
            } catch (error) {
                console.error('獲取未讀訊息數量失敗：', error);
                return;
            }
        }

        const friendItem = $(`.friend-item[data-id="${friendId}"]`);

        // 更新或移除未讀標記
        if (count > 0) {
            let $badge = friendItem.find('.unread-badge');
            if ($badge.length === 0) {
                friendItem.append(`<span class="unread-badge">${count}</span>`);
            } else {
                $badge.text(count);
            }
        } else {
            friendItem.find('.unread-badge').remove();
        }
    }

    // 更新訊息狀態
    function updateMessageStatus(messageId, delivered) {
        // 找到對應的訊息元素
        const messageElement = $(`[data-message-id="temp-${messageId}"]`);
        if (messageElement.length) {
            // 更新訊息狀態圖示
            if (delivered) {
                messageElement.find('.message-status').html('<i class="fas fa-check"></i>');
            } else {
                messageElement.find('.message-status').html('<i class="fas fa-times"></i>');
            }
        }
    }

    // 格式化時間顯示
    function formatTimeForMessage2(date) {
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        return `${hours}:${minutes}`;
    }

    // 格式化時間
    function formatTimeForMessage(date) {
        if (!date || isNaN(date.getTime())) {
            return '剛剛';
        }

        const now = new Date();
        const diff = Math.floor((now - date) / 1000); // 差異秒數

        // 檢查是否為同一天
        const isSameDay =
            date.getDate() === now.getDate() &&
            date.getMonth() === now.getMonth() &&
            date.getFullYear() === now.getFullYear();

        if (isSameDay) {
            // 如果是今天的消息，只顯示時間
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            return `${hours}:${minutes}`;
        } else if (diff < 86400 * 7) { // 一週內
            // 顯示星期幾
            const dayNames = ['週日', '週一', '週二', '週三', '週四', '週五', '週六'];
            const dayName = dayNames[date.getDay()];
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            return `${dayName} ${hours}:${minutes}`;
        } else {
            // 超過一週，顯示完整日期
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');

            // 如果是去年或更早的消息，顯示年份
            if (date.getFullYear() < now.getFullYear()) {
                return `${year}/${month}/${day} ${hours}:${minutes}`;
            } else {
                // 當年的消息不顯示年份
                return `${month}/${day} ${hours}:${minutes}`;
            }
        }
    }

    function scrollToBottom() {
        const container = $('.messages-container');
        container.scrollTop(container[0].scrollHeight);
    }

    // 在聊天室初始化時，載入未讀訊息數量
    async function loadUnreadMessageCounts() {
        try {
            const response = await $.ajax({
                url: '/api/chat/unreadCount',
                type: 'GET'
            });

            if (response.success && response.data > 0) {
                // 更新消息按鈕的未讀標記
                const $messageBtn = $('.action-btn i.fa-comment').parent();
                $messageBtn.append(`<span class="notification-badge">${response.data}</span>`);

                // 載入每個好友的未讀訊息數量
                await loadFriendsUnreadCounts();
            }
        } catch (error) {
            console.error('獲取未讀訊息數量失敗：', error);
        }
    }

    // 載入每個好友的未讀訊息數量
    async function loadFriendsUnreadCounts() {
        try {
            const friendItems = $('.friend-item');
            for (let i = 0; i < friendItems.length; i++) {
                const friendId = $(friendItems[i]).data('id');
                await updateUnreadMessageCount(friendId);
            }
        } catch (error) {
            console.error('獲取好友未讀訊息數量失敗：', error);
        }
    }
</script>